// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src/cli/schema execute for ./tests/__fixtures__/integrations-openapi.json execute accepts urls 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { ValidatedResponse } from 'openapi2typescript';
import { Action } from 'react-fetching-library';
import {
    actionBuilder,
    ActionValidatableConfig
} from 'openapi2typescript/react-fetching-library';

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export const SetString = zodSchemaSetString();
export type SetString = z.infer<typeof SetString>;

export const NewCookie = zodSchemaNewCookie();
export type NewCookie = z.infer<typeof NewCookie>;

export const MapStringNewCookie = zodSchemaMapStringNewCookie();
export type MapStringNewCookie = z.infer<typeof MapStringNewCookie>;

export const Date = zodSchemaDate();
export type Date = z.infer<typeof Date>;

export const EntityTag = zodSchemaEntityTag();
export type EntityTag = z.infer<typeof EntityTag>;

export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();
export type MultivaluedMapStringObject = z.infer<
  typeof MultivaluedMapStringObject
>;

export const Locale = zodSchemaLocale();
export type Locale = z.infer<typeof Locale>;

export const Link = zodSchemaLink();
export type Link = z.infer<typeof Link>;

export const SetLink = zodSchemaSetLink();
export type SetLink = z.infer<typeof SetLink>;

export const URI = zodSchemaURI();
export type URI = z.infer<typeof URI>;

export const MediaType = zodSchemaMediaType();
export type MediaType = z.infer<typeof MediaType>;

export const StatusType = zodSchemaStatusType();
export type StatusType = z.infer<typeof StatusType>;

export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();
export type MultivaluedMapStringString = z.infer<
  typeof MultivaluedMapStringString
>;

export const Family = zodSchemaFamily();
export type Family = z.infer<typeof Family>;

export const MapStringString = zodSchemaMapStringString();
export type MapStringString = z.infer<typeof MapStringString>;

export const ListString = zodSchemaListString();
export type ListString = z.infer<typeof ListString>;

export const UriBuilder = zodSchemaUriBuilder();
export type UriBuilder = z.infer<typeof UriBuilder>;

export const SetCharacter = zodSchemaSetCharacter();
export type SetCharacter = z.infer<typeof SetCharacter>;

export const Response = zodSchemaResponse();
export type Response = z.infer<typeof Response>;

export const Attributes = zodSchemaAttributes();
export type Attributes = z.infer<typeof Attributes>;

export const BasicAuthentication = zodSchemaBasicAuthentication();
export type BasicAuthentication = z.infer<typeof BasicAuthentication>;

export const HttpType = zodSchemaHttpType();
export type HttpType = z.infer<typeof HttpType>;

export const WebhookAttributes = zodSchemaWebhookAttributes();
export type WebhookAttributes = z.infer<typeof WebhookAttributes>;

export const EmailAttributes = zodSchemaEmailAttributes();
export type EmailAttributes = z.infer<typeof EmailAttributes>;

export const EndpointType = zodSchemaEndpointType();
export type EndpointType = z.infer<typeof EndpointType>;

export const Endpoint = zodSchemaEndpoint();
export type Endpoint = z.infer<typeof Endpoint>;

export const Application = zodSchemaApplication();
export type Application = z.infer<typeof Application>;

export const SetEndpoint = zodSchemaSetEndpoint();
export type SetEndpoint = z.infer<typeof SetEndpoint>;

export const EventType = zodSchemaEventType();
export type EventType = z.infer<typeof EventType>;

export const SetEventType = zodSchemaSetEventType();
export type SetEventType = z.infer<typeof SetEventType>;

export const Notification = zodSchemaNotification();
export type Notification = z.infer<typeof Notification>;

export const JsonObject = zodSchemaJsonObject();
export type JsonObject = z.infer<typeof JsonObject>;

export const NotificationHistory = zodSchemaNotificationHistory();
export type NotificationHistory = z.infer<typeof NotificationHistory>;

// GET /endpoints
const EndpointServiceGetEndpointsParamActive = z.boolean();
type EndpointServiceGetEndpointsParamActive = z.infer<
  typeof EndpointServiceGetEndpointsParamActive
>;
const EndpointServiceGetEndpointsParamLimit = z.number().int();
type EndpointServiceGetEndpointsParamLimit = z.infer<
  typeof EndpointServiceGetEndpointsParamLimit
>;
const EndpointServiceGetEndpointsParamOffset = z.number().int();
type EndpointServiceGetEndpointsParamOffset = z.infer<
  typeof EndpointServiceGetEndpointsParamOffset
>;
const EndpointServiceGetEndpointsParamPageNumber = z.number().int();
type EndpointServiceGetEndpointsParamPageNumber = z.infer<
  typeof EndpointServiceGetEndpointsParamPageNumber
>;
const EndpointServiceGetEndpointsParamSortBy = z.string();
type EndpointServiceGetEndpointsParamSortBy = z.infer<
  typeof EndpointServiceGetEndpointsParamSortBy
>;
const EndpointServiceGetEndpointsParamType = z.string();
type EndpointServiceGetEndpointsParamType = z.infer<
  typeof EndpointServiceGetEndpointsParamType
>;
const EndpointServiceGetEndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
type EndpointServiceGetEndpointsParamResponse200 = z.infer<
  typeof EndpointServiceGetEndpointsParamResponse200
>;
export interface EndpointServiceGetEndpoints {
  active?: EndpointServiceGetEndpointsParamActive;
  limit?: EndpointServiceGetEndpointsParamLimit;
  offset?: EndpointServiceGetEndpointsParamOffset;
  pageNumber?: EndpointServiceGetEndpointsParamPageNumber;
  sortBy?: EndpointServiceGetEndpointsParamSortBy;
  type?: EndpointServiceGetEndpointsParamType;
}

export type EndpointServiceGetEndpointsPayload =
  | ValidatedResponse<
      'EndpointServiceGetEndpointsParamResponse200',
      200,
      EndpointServiceGetEndpointsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceGetEndpoints = Action<
  EndpointServiceGetEndpointsPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceGetEndpoints = (
    params: EndpointServiceGetEndpoints
): ActionEndpointServiceGetEndpoints => {
    const path = '/api/integrations/v1.0/endpoints';
    const query = {} as Record<string, any>;
    if (params.active !== undefined) {
        query.active = params.active.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    if (params.type !== undefined) {
        query.type = params.type.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetEndpointsParamResponse200,
                type: 'EndpointServiceGetEndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// POST /endpoints
export interface EndpointServiceCreateEndpoint {
  body: Endpoint;
}

export type EndpointServiceCreateEndpointPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceCreateEndpoint = Action<
  EndpointServiceCreateEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceCreateEndpoint = (
    params: EndpointServiceCreateEndpoint
): ActionEndpointServiceCreateEndpoint => {
    const path = '/api/integrations/v1.0/endpoints';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// GET /endpoints/{id}
export interface EndpointServiceGetEndpoint {
  id: UUID;
}

export type EndpointServiceGetEndpointPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceGetEndpoint = Action<
  EndpointServiceGetEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceGetEndpoint = (
    params: EndpointServiceGetEndpoint
): ActionEndpointServiceGetEndpoint => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// PUT /endpoints/{id}
const EndpointServiceUpdateEndpointParamResponse200 = z.string();
type EndpointServiceUpdateEndpointParamResponse200 = z.infer<
  typeof EndpointServiceUpdateEndpointParamResponse200
>;
export interface EndpointServiceUpdateEndpoint {
  id: UUID;
  body: Endpoint;
}

export type EndpointServiceUpdateEndpointPayload =
  | ValidatedResponse<
      'EndpointServiceUpdateEndpointParamResponse200',
      200,
      EndpointServiceUpdateEndpointParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceUpdateEndpoint = Action<
  EndpointServiceUpdateEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceUpdateEndpoint = (
    params: EndpointServiceUpdateEndpoint
): ActionEndpointServiceUpdateEndpoint => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceUpdateEndpointParamResponse200,
                type: 'EndpointServiceUpdateEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /endpoints/{id}
const EndpointServiceDeleteEndpointParamResponse200 = z.string();
type EndpointServiceDeleteEndpointParamResponse200 = z.infer<
  typeof EndpointServiceDeleteEndpointParamResponse200
>;
export interface EndpointServiceDeleteEndpoint {
  id: UUID;
}

export type EndpointServiceDeleteEndpointPayload =
  | ValidatedResponse<
      'EndpointServiceDeleteEndpointParamResponse200',
      200,
      EndpointServiceDeleteEndpointParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceDeleteEndpoint = Action<
  EndpointServiceDeleteEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceDeleteEndpoint = (
    params: EndpointServiceDeleteEndpoint
): ActionEndpointServiceDeleteEndpoint => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceDeleteEndpointParamResponse200,
                type: 'EndpointServiceDeleteEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /endpoints/{id}/enable
const EndpointServiceEnableEndpointParamResponse200 = z.string();
type EndpointServiceEnableEndpointParamResponse200 = z.infer<
  typeof EndpointServiceEnableEndpointParamResponse200
>;
export interface EndpointServiceEnableEndpoint {
  id: UUID;
}

export type EndpointServiceEnableEndpointPayload =
  | ValidatedResponse<
      'EndpointServiceEnableEndpointParamResponse200',
      200,
      EndpointServiceEnableEndpointParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceEnableEndpoint = Action<
  EndpointServiceEnableEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceEnableEndpoint = (
    params: EndpointServiceEnableEndpoint
): ActionEndpointServiceEnableEndpoint => {
    const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceEnableEndpointParamResponse200,
                type: 'EndpointServiceEnableEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /endpoints/{id}/enable
const EndpointServiceDisableEndpointParamResponse200 = z.string();
type EndpointServiceDisableEndpointParamResponse200 = z.infer<
  typeof EndpointServiceDisableEndpointParamResponse200
>;
export interface EndpointServiceDisableEndpoint {
  id: UUID;
}

export type EndpointServiceDisableEndpointPayload =
  | ValidatedResponse<
      'EndpointServiceDisableEndpointParamResponse200',
      200,
      EndpointServiceDisableEndpointParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceDisableEndpoint = Action<
  EndpointServiceDisableEndpointPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceDisableEndpoint = (
    params: EndpointServiceDisableEndpoint
): ActionEndpointServiceDisableEndpoint => {
    const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceDisableEndpointParamResponse200,
                type: 'EndpointServiceDisableEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// GET /endpoints/{id}/history
const EndpointServiceGetEndpointHistoryParamResponse200 = z.array(
    zodSchemaNotificationHistory()
);
type EndpointServiceGetEndpointHistoryParamResponse200 = z.infer<
  typeof EndpointServiceGetEndpointHistoryParamResponse200
>;
export interface EndpointServiceGetEndpointHistory {
  id: UUID;
}

export type EndpointServiceGetEndpointHistoryPayload =
  | ValidatedResponse<
      'EndpointServiceGetEndpointHistoryParamResponse200',
      200,
      EndpointServiceGetEndpointHistoryParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceGetEndpointHistory = Action<
  EndpointServiceGetEndpointHistoryPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceGetEndpointHistory = (
    params: EndpointServiceGetEndpointHistory
): ActionEndpointServiceGetEndpointHistory => {
    const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetEndpointHistoryParamResponse200,
                type: 'EndpointServiceGetEndpointHistoryParamResponse200'
            }
        ]
    })
    .build();
};

// GET /endpoints/{id}/history/{history_id}/details
const EndpointServiceGetDetailedEndpointHistoryParamHistoryId = z
.number()
.int();
type EndpointServiceGetDetailedEndpointHistoryParamHistoryId = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamHistoryId
>;
const EndpointServiceGetDetailedEndpointHistoryParamLimit = z.number().int();
type EndpointServiceGetDetailedEndpointHistoryParamLimit = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamLimit
>;
const EndpointServiceGetDetailedEndpointHistoryParamOffset = z.number().int();
type EndpointServiceGetDetailedEndpointHistoryParamOffset = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamOffset
>;
const EndpointServiceGetDetailedEndpointHistoryParamPageNumber = z
.number()
.int();
type EndpointServiceGetDetailedEndpointHistoryParamPageNumber = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamPageNumber
>;
const EndpointServiceGetDetailedEndpointHistoryParamPageSize = z.number().int();
type EndpointServiceGetDetailedEndpointHistoryParamPageSize = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamPageSize
>;
const EndpointServiceGetDetailedEndpointHistoryParamSortBy = z.string();
type EndpointServiceGetDetailedEndpointHistoryParamSortBy = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamSortBy
>;
const EndpointServiceGetDetailedEndpointHistoryParamResponse200 = z.string();
type EndpointServiceGetDetailedEndpointHistoryParamResponse200 = z.infer<
  typeof EndpointServiceGetDetailedEndpointHistoryParamResponse200
>;
export interface EndpointServiceGetDetailedEndpointHistory {
  historyId: EndpointServiceGetDetailedEndpointHistoryParamHistoryId;
  id: UUID;
  limit?: EndpointServiceGetDetailedEndpointHistoryParamLimit;
  offset?: EndpointServiceGetDetailedEndpointHistoryParamOffset;
  pageNumber?: EndpointServiceGetDetailedEndpointHistoryParamPageNumber;
  pageSize?: EndpointServiceGetDetailedEndpointHistoryParamPageSize;
  sortBy?: EndpointServiceGetDetailedEndpointHistoryParamSortBy;
}

export type EndpointServiceGetDetailedEndpointHistoryPayload =
  | ValidatedResponse<
      'EndpointServiceGetDetailedEndpointHistoryParamResponse200',
      200,
      EndpointServiceGetDetailedEndpointHistoryParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionEndpointServiceGetDetailedEndpointHistory = Action<
  EndpointServiceGetDetailedEndpointHistoryPayload,
  ActionValidatableConfig
>;
export const actionEndpointServiceGetDetailedEndpointHistory = (
    params: EndpointServiceGetDetailedEndpointHistory
): ActionEndpointServiceGetDetailedEndpointHistory => {
    const path = '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'
    .replace('{history_id}', params.historyId.toString())
    .replace('{id}', params.id.toString());
    const query = {} as Record<string, any>;
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.pageSize !== undefined) {
        query.pageSize = params.pageSize.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetDetailedEndpointHistoryParamResponse200,
                type: 'EndpointServiceGetDetailedEndpointHistoryParamResponse200'
            }
        ]
    })
    .build();
};

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaSetString() {
    return z.array(z.string());
}

export function zodSchemaNewCookie() {
    return z.object({
        domain: z.string().optional().nullable(),
        name: z.string().optional().nullable(),
        path: z.string().optional().nullable(),
        value: z.string().optional().nullable(),
        version: z.number().int().optional().nullable(),
        comment: z.string().optional().nullable(),
        expiry: zodSchemaDate().optional().nullable(),
        httpOnly: z.boolean().optional().nullable(),
        maxAge: z.number().int().optional().nullable(),
        secure: z.boolean().optional().nullable()
    });
}

export function zodSchemaMapStringNewCookie() {
    return z.record(zodSchemaNewCookie());
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEntityTag() {
    return z.object({
        value: z.string().optional().nullable(),
        weak: z.boolean().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringObject() {
    return z.record(z.unknown());
}

export function zodSchemaLocale() {
    return z.object({
        country: z.string().optional().nullable(),
        displayCountry: z.string().optional().nullable(),
        displayLanguage: z.string().optional().nullable(),
        displayName: z.string().optional().nullable(),
        displayScript: z.string().optional().nullable(),
        displayVariant: z.string().optional().nullable(),
        extensionKeys: zodSchemaSetCharacter().optional().nullable(),
        iSO3Country: z.string().optional().nullable(),
        iSO3Language: z.string().optional().nullable(),
        language: z.string().optional().nullable(),
        script: z.string().optional().nullable(),
        unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),
        unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),
        variant: z.string().optional().nullable()
    });
}

export function zodSchemaLink() {
    return z.object({
        params: zodSchemaMapStringString().optional().nullable(),
        rel: z.string().optional().nullable(),
        rels: zodSchemaListString().optional().nullable(),
        title: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        uri: zodSchemaURI().optional().nullable(),
        uriBuilder: zodSchemaUriBuilder().optional().nullable()
    });
}

export function zodSchemaSetLink() {
    return z.array(zodSchemaLink());
}

export function zodSchemaURI() {
    return z.string();
}

export function zodSchemaMediaType() {
    return z.object({
        parameters: zodSchemaMapStringString().optional().nullable(),
        subtype: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        wildcardSubtype: z.boolean().optional().nullable(),
        wildcardType: z.boolean().optional().nullable()
    });
}

export function zodSchemaStatusType() {
    return z.object({
        family: zodSchemaFamily().optional().nullable(),
        reasonPhrase: z.string().optional().nullable(),
        statusCode: z.number().int().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringString() {
    return z.record(z.string());
}

export function zodSchemaFamily() {
    return z.enum([
        'CLIENT_ERROR',
        'INFORMATIONAL',
        'OTHER',
        'REDIRECTION',
        'SERVER_ERROR',
        'SUCCESSFUL'
    ]);
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaListString() {
    return z.array(z.string());
}

export function zodSchemaUriBuilder() {
    return z.unknown();
}

export function zodSchemaSetCharacter() {
    return z.array(z.string());
}

export function zodSchemaResponse() {
    return z.object({
        allowedMethods: zodSchemaSetString().optional().nullable(),
        cookies: zodSchemaMapStringNewCookie().optional().nullable(),
        date: zodSchemaDate().optional().nullable(),
        entity: z.unknown().optional().nullable(),
        entityTag: zodSchemaEntityTag().optional().nullable(),
        headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        language: zodSchemaLocale().optional().nullable(),
        lastModified: zodSchemaDate().optional().nullable(),
        length: z.number().int().optional().nullable(),
        links: zodSchemaSetLink().optional().nullable(),
        location: zodSchemaURI().optional().nullable(),
        mediaType: zodSchemaMediaType().optional().nullable(),
        metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        status: z.number().int().optional().nullable(),
        statusInfo: zodSchemaStatusType().optional().nullable(),
        stringHeaders: zodSchemaMultivaluedMapStringString().optional().nullable()
    });
}

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaBasicAuthentication() {
    return z.object({
        password: z.string().optional().nullable(),
        username: z.string().optional().nullable()
    });
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST', 'PUT' ]);
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        basic_authentication: zodSchemaBasicAuthentication().optional().nullable(),
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST', 'PUT' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email', 'default' ]);
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z
        .union([ zodSchemaWebhookAttributes(), zodSchemaEmailAttributes() ])
        .optional()
        .nullable(),
        type: z.intersection(
            zodSchemaEndpointType(),
            z.enum([ 'webhook', 'email', 'default' ])
        ),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaApplication() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        eventTypes: zodSchemaSetEventType().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaSetEndpoint() {
    return z.array(zodSchemaEndpoint());
}

export function zodSchemaEventType() {
    return z.object({
        application: z
        .lazy(() => zodSchemaApplication())
        .optional()
        .nullable(),
        description: z.string(),
        endpoints: zodSchemaSetEndpoint().optional().nullable(),
        id: z.number().int().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaSetEventType() {
    return z.array(zodSchemaEventType());
}

export function zodSchemaNotification() {
    return z.object({
        endpoint: zodSchemaEndpoint().optional().nullable(),
        payload: z.unknown().optional().nullable(),
        tenant: z.string().optional().nullable()
    });
}

export function zodSchemaJsonObject() {
    return z.array(z.unknown());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/integrations-openapi.json execute input file accepts path 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { actionBuilder } from 'openapi2typescript/react-fetching-library';

export const UUID = zodSchemaUUID();

export const SetString = zodSchemaSetString();

export const NewCookie = zodSchemaNewCookie();

export const MapStringNewCookie = zodSchemaMapStringNewCookie();

export const Date = zodSchemaDate();

export const EntityTag = zodSchemaEntityTag();

export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();

export const Locale = zodSchemaLocale();

export const Link = zodSchemaLink();

export const SetLink = zodSchemaSetLink();

export const URI = zodSchemaURI();

export const MediaType = zodSchemaMediaType();

export const StatusType = zodSchemaStatusType();

export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();

export const Family = zodSchemaFamily();

export const MapStringString = zodSchemaMapStringString();

export const ListString = zodSchemaListString();

export const UriBuilder = zodSchemaUriBuilder();

export const SetCharacter = zodSchemaSetCharacter();

export const Response = zodSchemaResponse();

export const Attributes = zodSchemaAttributes();

export const BasicAuthentication = zodSchemaBasicAuthentication();

export const HttpType = zodSchemaHttpType();

export const WebhookAttributes = zodSchemaWebhookAttributes();

export const EmailAttributes = zodSchemaEmailAttributes();

export const EndpointType = zodSchemaEndpointType();

export const Endpoint = zodSchemaEndpoint();

export const Application = zodSchemaApplication();

export const SetEndpoint = zodSchemaSetEndpoint();

export const EventType = zodSchemaEventType();

export const SetEventType = zodSchemaSetEventType();

export const Notification = zodSchemaNotification();

export const JsonObject = zodSchemaJsonObject();

export const NotificationHistory = zodSchemaNotificationHistory();

// GET /endpoints
const EndpointServiceGetEndpointsParamActive = z.boolean();
const EndpointServiceGetEndpointsParamLimit = z.number().int();
const EndpointServiceGetEndpointsParamOffset = z.number().int();
const EndpointServiceGetEndpointsParamPageNumber = z.number().int();
const EndpointServiceGetEndpointsParamSortBy = z.string();
const EndpointServiceGetEndpointsParamType = z.string();
const EndpointServiceGetEndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
/*
 Params
'active'?:EndpointServiceGetEndpointsParamActive,
'limit'?:EndpointServiceGetEndpointsParamLimit,
'offset'?:EndpointServiceGetEndpointsParamOffset,
'pageNumber'?:EndpointServiceGetEndpointsParamPageNumber,
'sortBy'?:EndpointServiceGetEndpointsParamSortBy,
'type'?:EndpointServiceGetEndpointsParamType
*/
export const actionEndpointServiceGetEndpoints = (params) => {
    const path = '/api/integrations/v1.0/endpoints';
    const query = {};
    if (params.active !== undefined) {
        query.active = params.active.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    if (params.type !== undefined) {
        query.type = params.type.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetEndpointsParamResponse200,
                type: 'EndpointServiceGetEndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// POST /endpoints
/*
 Params
body: Endpoint
*/
export const actionEndpointServiceCreateEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints';
    const query = {};
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// GET /endpoints/{id}
/*
 Params
'id':UUID
*/
export const actionEndpointServiceGetEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// PUT /endpoints/{id}
const EndpointServiceUpdateEndpointParamResponse200 = z.string();
/*
 Params
'id':UUID,
body: Endpoint
*/
export const actionEndpointServiceUpdateEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceUpdateEndpointParamResponse200,
                type: 'EndpointServiceUpdateEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /endpoints/{id}
const EndpointServiceDeleteEndpointParamResponse200 = z.string();
/*
 Params
'id':UUID
*/
export const actionEndpointServiceDeleteEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceDeleteEndpointParamResponse200,
                type: 'EndpointServiceDeleteEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /endpoints/{id}/enable
const EndpointServiceEnableEndpointParamResponse200 = z.string();
/*
 Params
'id':UUID
*/
export const actionEndpointServiceEnableEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceEnableEndpointParamResponse200,
                type: 'EndpointServiceEnableEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /endpoints/{id}/enable
const EndpointServiceDisableEndpointParamResponse200 = z.string();
/*
 Params
'id':UUID
*/
export const actionEndpointServiceDisableEndpoint = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceDisableEndpointParamResponse200,
                type: 'EndpointServiceDisableEndpointParamResponse200'
            }
        ]
    })
    .build();
};

// GET /endpoints/{id}/history
const EndpointServiceGetEndpointHistoryParamResponse200 = z.array(
    zodSchemaNotificationHistory()
);
/*
 Params
'id':UUID
*/
export const actionEndpointServiceGetEndpointHistory = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}/history'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetEndpointHistoryParamResponse200,
                type: 'EndpointServiceGetEndpointHistoryParamResponse200'
            }
        ]
    })
    .build();
};

// GET /endpoints/{id}/history/{history_id}/details
const EndpointServiceGetDetailedEndpointHistoryParamHistoryId = z
.number()
.int();
const EndpointServiceGetDetailedEndpointHistoryParamLimit = z.number().int();
const EndpointServiceGetDetailedEndpointHistoryParamOffset = z.number().int();
const EndpointServiceGetDetailedEndpointHistoryParamPageNumber = z
.number()
.int();
const EndpointServiceGetDetailedEndpointHistoryParamPageSize = z.number().int();
const EndpointServiceGetDetailedEndpointHistoryParamSortBy = z.string();
const EndpointServiceGetDetailedEndpointHistoryParamResponse200 = z.string();
/*
 Params
'historyId':EndpointServiceGetDetailedEndpointHistoryParamHistoryId,
'id':UUID,
'limit'?:EndpointServiceGetDetailedEndpointHistoryParamLimit,
'offset'?:EndpointServiceGetDetailedEndpointHistoryParamOffset,
'pageNumber'?:EndpointServiceGetDetailedEndpointHistoryParamPageNumber,
'pageSize'?:EndpointServiceGetDetailedEndpointHistoryParamPageSize,
'sortBy'?:EndpointServiceGetDetailedEndpointHistoryParamSortBy
*/
export const actionEndpointServiceGetDetailedEndpointHistory = (params) => {
    const path = '/api/integrations/v1.0/endpoints/{id}/history/{history_id}/details'
    .replace('{history_id}', params.historyId.toString())
    .replace('{id}', params.id.toString());
    const query = {};
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.pageSize !== undefined) {
        query.pageSize = params.pageSize.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: EndpointServiceGetDetailedEndpointHistoryParamResponse200,
                type: 'EndpointServiceGetDetailedEndpointHistoryParamResponse200'
            }
        ]
    })
    .build();
};

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaSetString() {
    return z.array(z.string());
}

export function zodSchemaNewCookie() {
    return z.object({
        domain: z.string().optional().nullable(),
        name: z.string().optional().nullable(),
        path: z.string().optional().nullable(),
        value: z.string().optional().nullable(),
        version: z.number().int().optional().nullable(),
        comment: z.string().optional().nullable(),
        expiry: zodSchemaDate().optional().nullable(),
        httpOnly: z.boolean().optional().nullable(),
        maxAge: z.number().int().optional().nullable(),
        secure: z.boolean().optional().nullable()
    });
}

export function zodSchemaMapStringNewCookie() {
    return z.record(zodSchemaNewCookie());
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEntityTag() {
    return z.object({
        value: z.string().optional().nullable(),
        weak: z.boolean().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringObject() {
    return z.record(z.unknown());
}

export function zodSchemaLocale() {
    return z.object({
        country: z.string().optional().nullable(),
        displayCountry: z.string().optional().nullable(),
        displayLanguage: z.string().optional().nullable(),
        displayName: z.string().optional().nullable(),
        displayScript: z.string().optional().nullable(),
        displayVariant: z.string().optional().nullable(),
        extensionKeys: zodSchemaSetCharacter().optional().nullable(),
        iSO3Country: z.string().optional().nullable(),
        iSO3Language: z.string().optional().nullable(),
        language: z.string().optional().nullable(),
        script: z.string().optional().nullable(),
        unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),
        unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),
        variant: z.string().optional().nullable()
    });
}

export function zodSchemaLink() {
    return z.object({
        params: zodSchemaMapStringString().optional().nullable(),
        rel: z.string().optional().nullable(),
        rels: zodSchemaListString().optional().nullable(),
        title: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        uri: zodSchemaURI().optional().nullable(),
        uriBuilder: zodSchemaUriBuilder().optional().nullable()
    });
}

export function zodSchemaSetLink() {
    return z.array(zodSchemaLink());
}

export function zodSchemaURI() {
    return z.string();
}

export function zodSchemaMediaType() {
    return z.object({
        parameters: zodSchemaMapStringString().optional().nullable(),
        subtype: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        wildcardSubtype: z.boolean().optional().nullable(),
        wildcardType: z.boolean().optional().nullable()
    });
}

export function zodSchemaStatusType() {
    return z.object({
        family: zodSchemaFamily().optional().nullable(),
        reasonPhrase: z.string().optional().nullable(),
        statusCode: z.number().int().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringString() {
    return z.record(z.string());
}

export function zodSchemaFamily() {
    return z.enum([
        'CLIENT_ERROR',
        'INFORMATIONAL',
        'OTHER',
        'REDIRECTION',
        'SERVER_ERROR',
        'SUCCESSFUL'
    ]);
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaListString() {
    return z.array(z.string());
}

export function zodSchemaUriBuilder() {
    return z.unknown();
}

export function zodSchemaSetCharacter() {
    return z.array(z.string());
}

export function zodSchemaResponse() {
    return z.object({
        allowedMethods: zodSchemaSetString().optional().nullable(),
        cookies: zodSchemaMapStringNewCookie().optional().nullable(),
        date: zodSchemaDate().optional().nullable(),
        entity: z.unknown().optional().nullable(),
        entityTag: zodSchemaEntityTag().optional().nullable(),
        headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        language: zodSchemaLocale().optional().nullable(),
        lastModified: zodSchemaDate().optional().nullable(),
        length: z.number().int().optional().nullable(),
        links: zodSchemaSetLink().optional().nullable(),
        location: zodSchemaURI().optional().nullable(),
        mediaType: zodSchemaMediaType().optional().nullable(),
        metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        status: z.number().int().optional().nullable(),
        statusInfo: zodSchemaStatusType().optional().nullable(),
        stringHeaders: zodSchemaMultivaluedMapStringString().optional().nullable()
    });
}

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaBasicAuthentication() {
    return z.object({
        password: z.string().optional().nullable(),
        username: z.string().optional().nullable()
    });
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST', 'PUT' ]);
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        basic_authentication: zodSchemaBasicAuthentication().optional().nullable(),
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST', 'PUT' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email', 'default' ]);
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z
        .union([ zodSchemaWebhookAttributes(), zodSchemaEmailAttributes() ])
        .optional()
        .nullable(),
        type: z.intersection(
            zodSchemaEndpointType(),
            z.enum([ 'webhook', 'email', 'default' ])
        ),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaApplication() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        eventTypes: zodSchemaSetEventType().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaSetEndpoint() {
    return z.array(zodSchemaEndpoint());
}

export function zodSchemaEventType() {
    return z.object({
        application: z
        .lazy(() => zodSchemaApplication())
        .optional()
        .nullable(),
        description: z.string(),
        endpoints: zodSchemaSetEndpoint().optional().nullable(),
        id: z.number().int().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaSetEventType() {
    return z.array(zodSchemaEventType());
}

export function zodSchemaNotification() {
    return z.object({
        endpoint: zodSchemaEndpoint().optional().nullable(),
        payload: z.unknown().optional().nullable(),
        tenant: z.string().optional().nullable()
    });
}

export function zodSchemaJsonObject() {
    return z.array(z.unknown());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/notifications-openapi.json execute accepts urls 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { ValidatedResponse } from 'openapi2typescript';
import { Action } from 'react-fetching-library';
import {
    actionBuilder,
    ActionValidatableConfig
} from 'openapi2typescript/react-fetching-library';

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export const SetString = zodSchemaSetString();
export type SetString = z.infer<typeof SetString>;

export const NewCookie = zodSchemaNewCookie();
export type NewCookie = z.infer<typeof NewCookie>;

export const MapStringNewCookie = zodSchemaMapStringNewCookie();
export type MapStringNewCookie = z.infer<typeof MapStringNewCookie>;

export const Date = zodSchemaDate();
export type Date = z.infer<typeof Date>;

export const EntityTag = zodSchemaEntityTag();
export type EntityTag = z.infer<typeof EntityTag>;

export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();
export type MultivaluedMapStringObject = z.infer<
  typeof MultivaluedMapStringObject
>;

export const Locale = zodSchemaLocale();
export type Locale = z.infer<typeof Locale>;

export const Link = zodSchemaLink();
export type Link = z.infer<typeof Link>;

export const SetLink = zodSchemaSetLink();
export type SetLink = z.infer<typeof SetLink>;

export const URI = zodSchemaURI();
export type URI = z.infer<typeof URI>;

export const MediaType = zodSchemaMediaType();
export type MediaType = z.infer<typeof MediaType>;

export const StatusType = zodSchemaStatusType();
export type StatusType = z.infer<typeof StatusType>;

export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();
export type MultivaluedMapStringString = z.infer<
  typeof MultivaluedMapStringString
>;

export const Family = zodSchemaFamily();
export type Family = z.infer<typeof Family>;

export const MapStringString = zodSchemaMapStringString();
export type MapStringString = z.infer<typeof MapStringString>;

export const ListString = zodSchemaListString();
export type ListString = z.infer<typeof ListString>;

export const UriBuilder = zodSchemaUriBuilder();
export type UriBuilder = z.infer<typeof UriBuilder>;

export const SetCharacter = zodSchemaSetCharacter();
export type SetCharacter = z.infer<typeof SetCharacter>;

export const Response = zodSchemaResponse();
export type Response = z.infer<typeof Response>;

export const Attributes = zodSchemaAttributes();
export type Attributes = z.infer<typeof Attributes>;

export const BasicAuthentication = zodSchemaBasicAuthentication();
export type BasicAuthentication = z.infer<typeof BasicAuthentication>;

export const HttpType = zodSchemaHttpType();
export type HttpType = z.infer<typeof HttpType>;

export const WebhookAttributes = zodSchemaWebhookAttributes();
export type WebhookAttributes = z.infer<typeof WebhookAttributes>;

export const EmailAttributes = zodSchemaEmailAttributes();
export type EmailAttributes = z.infer<typeof EmailAttributes>;

export const EndpointType = zodSchemaEndpointType();
export type EndpointType = z.infer<typeof EndpointType>;

export const Endpoint = zodSchemaEndpoint();
export type Endpoint = z.infer<typeof Endpoint>;

export const Application = zodSchemaApplication();
export type Application = z.infer<typeof Application>;

export const SetEndpoint = zodSchemaSetEndpoint();
export type SetEndpoint = z.infer<typeof SetEndpoint>;

export const EventType = zodSchemaEventType();
export type EventType = z.infer<typeof EventType>;

export const SetEventType = zodSchemaSetEventType();
export type SetEventType = z.infer<typeof SetEventType>;

export const Notification = zodSchemaNotification();
export type Notification = z.infer<typeof Notification>;

export const JsonObject = zodSchemaJsonObject();
export type JsonObject = z.infer<typeof JsonObject>;

export const NotificationHistory = zodSchemaNotificationHistory();
export type NotificationHistory = z.infer<typeof NotificationHistory>;

// GET /notifications/defaults
const NotificationServiceGetEndpointsForDefaultsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
type NotificationServiceGetEndpointsForDefaultsParamResponse200 = z.infer<
  typeof NotificationServiceGetEndpointsForDefaultsParamResponse200
>;
export type NotificationServiceGetEndpointsForDefaultsPayload =
  | ValidatedResponse<
      'NotificationServiceGetEndpointsForDefaultsParamResponse200',
      200,
      NotificationServiceGetEndpointsForDefaultsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceGetEndpointsForDefaults = Action<
  NotificationServiceGetEndpointsForDefaultsPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceGetEndpointsForDefaults = (): ActionNotificationServiceGetEndpointsForDefaults => {
    const path = '/api/notifications/v1.0/notifications/defaults';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetEndpointsForDefaultsParamResponse200,
                type: 'NotificationServiceGetEndpointsForDefaultsParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /notifications/defaults/{endpointId}
export interface NotificationServiceAddEndpointToDefaults {
  endpointId: UUID;
}

export type NotificationServiceAddEndpointToDefaultsPayload =
  | ValidatedResponse<'Response', 200, Response>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceAddEndpointToDefaults = Action<
  NotificationServiceAddEndpointToDefaultsPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceAddEndpointToDefaults = (
    params: NotificationServiceAddEndpointToDefaults
): ActionNotificationServiceAddEndpointToDefaults => {
    const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(
        '{endpointId}',
        params.endpointId.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// DELETE /notifications/defaults/{endpointId}
export interface NotificationServiceDeleteEndpointFromDefaults {
  endpointId: UUID;
}

export type NotificationServiceDeleteEndpointFromDefaultsPayload =
  | ValidatedResponse<'Response', 200, Response>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceDeleteEndpointFromDefaults = Action<
  NotificationServiceDeleteEndpointFromDefaultsPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceDeleteEndpointFromDefaults = (
    params: NotificationServiceDeleteEndpointFromDefaults
): ActionNotificationServiceDeleteEndpointFromDefaults => {
    const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(
        '{endpointId}',
        params.endpointId.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// GET /notifications/eventTypes
const NotificationServiceGetEventTypesParamLimit = z.number().int();
type NotificationServiceGetEventTypesParamLimit = z.infer<
  typeof NotificationServiceGetEventTypesParamLimit
>;
const NotificationServiceGetEventTypesParamOffset = z.number().int();
type NotificationServiceGetEventTypesParamOffset = z.infer<
  typeof NotificationServiceGetEventTypesParamOffset
>;
const NotificationServiceGetEventTypesParamPageNumber = z.number().int();
type NotificationServiceGetEventTypesParamPageNumber = z.infer<
  typeof NotificationServiceGetEventTypesParamPageNumber
>;
const NotificationServiceGetEventTypesParamSortBy = z.string();
type NotificationServiceGetEventTypesParamSortBy = z.infer<
  typeof NotificationServiceGetEventTypesParamSortBy
>;
const NotificationServiceGetEventTypesParamResponse200 = z.array(
    zodSchemaEventType()
);
type NotificationServiceGetEventTypesParamResponse200 = z.infer<
  typeof NotificationServiceGetEventTypesParamResponse200
>;
export interface NotificationServiceGetEventTypes {
  limit?: NotificationServiceGetEventTypesParamLimit;
  offset?: NotificationServiceGetEventTypesParamOffset;
  pageNumber?: NotificationServiceGetEventTypesParamPageNumber;
  sortBy?: NotificationServiceGetEventTypesParamSortBy;
}

export type NotificationServiceGetEventTypesPayload =
  | ValidatedResponse<
      'NotificationServiceGetEventTypesParamResponse200',
      200,
      NotificationServiceGetEventTypesParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceGetEventTypes = Action<
  NotificationServiceGetEventTypesPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceGetEventTypes = (
    params: NotificationServiceGetEventTypes
): ActionNotificationServiceGetEventTypes => {
    const path = '/api/notifications/v1.0/notifications/eventTypes';
    const query = {} as Record<string, any>;
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetEventTypesParamResponse200,
                type: 'NotificationServiceGetEventTypesParamResponse200'
            }
        ]
    })
    .build();
};

// GET /notifications/eventTypes/{eventTypeId}
const NotificationServiceGetLinkedEndpointsParamEventTypeId = z.number().int();
type NotificationServiceGetLinkedEndpointsParamEventTypeId = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamEventTypeId
>;
const NotificationServiceGetLinkedEndpointsParamLimit = z.number().int();
type NotificationServiceGetLinkedEndpointsParamLimit = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamLimit
>;
const NotificationServiceGetLinkedEndpointsParamOffset = z.number().int();
type NotificationServiceGetLinkedEndpointsParamOffset = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamOffset
>;
const NotificationServiceGetLinkedEndpointsParamPageNumber = z.number().int();
type NotificationServiceGetLinkedEndpointsParamPageNumber = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamPageNumber
>;
const NotificationServiceGetLinkedEndpointsParamSortBy = z.string();
type NotificationServiceGetLinkedEndpointsParamSortBy = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamSortBy
>;
const NotificationServiceGetLinkedEndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
type NotificationServiceGetLinkedEndpointsParamResponse200 = z.infer<
  typeof NotificationServiceGetLinkedEndpointsParamResponse200
>;
export interface NotificationServiceGetLinkedEndpoints {
  eventTypeId: NotificationServiceGetLinkedEndpointsParamEventTypeId;
  limit?: NotificationServiceGetLinkedEndpointsParamLimit;
  offset?: NotificationServiceGetLinkedEndpointsParamOffset;
  pageNumber?: NotificationServiceGetLinkedEndpointsParamPageNumber;
  sortBy?: NotificationServiceGetLinkedEndpointsParamSortBy;
}

export type NotificationServiceGetLinkedEndpointsPayload =
  | ValidatedResponse<
      'NotificationServiceGetLinkedEndpointsParamResponse200',
      200,
      NotificationServiceGetLinkedEndpointsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceGetLinkedEndpoints = Action<
  NotificationServiceGetLinkedEndpointsPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceGetLinkedEndpoints = (
    params: NotificationServiceGetLinkedEndpoints
): ActionNotificationServiceGetLinkedEndpoints => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}'.replace(
        '{eventTypeId}',
        params.eventTypeId.toString()
    );
    const query = {} as Record<string, any>;
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetLinkedEndpointsParamResponse200,
                type: 'NotificationServiceGetLinkedEndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /notifications/eventTypes/{eventTypeId}/{endpointId}
const NotificationServiceLinkEndpointToEventTypeParamEventTypeId = z
.number()
.int();
type NotificationServiceLinkEndpointToEventTypeParamEventTypeId = z.infer<
  typeof NotificationServiceLinkEndpointToEventTypeParamEventTypeId
>;
const NotificationServiceLinkEndpointToEventTypeParamResponse200 = z.string();
type NotificationServiceLinkEndpointToEventTypeParamResponse200 = z.infer<
  typeof NotificationServiceLinkEndpointToEventTypeParamResponse200
>;
export interface NotificationServiceLinkEndpointToEventType {
  endpointId: UUID;
  eventTypeId: NotificationServiceLinkEndpointToEventTypeParamEventTypeId;
}

export type NotificationServiceLinkEndpointToEventTypePayload =
  | ValidatedResponse<
      'NotificationServiceLinkEndpointToEventTypeParamResponse200',
      200,
      NotificationServiceLinkEndpointToEventTypeParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceLinkEndpointToEventType = Action<
  NotificationServiceLinkEndpointToEventTypePayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceLinkEndpointToEventType = (
    params: NotificationServiceLinkEndpointToEventType
): ActionNotificationServiceLinkEndpointToEventType => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'
    .replace('{endpointId}', params.endpointId.toString())
    .replace('{eventTypeId}', params.eventTypeId.toString());
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceLinkEndpointToEventTypeParamResponse200,
                type: 'NotificationServiceLinkEndpointToEventTypeParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /notifications/eventTypes/{eventTypeId}/{endpointId}
const NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId = z
.number()
.int();
type NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId = z.infer<
  typeof NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId
>;
export interface NotificationServiceUnlinkEndpointFromEventType {
  endpointId: UUID;
  eventTypeId: NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId;
}

export type NotificationServiceUnlinkEndpointFromEventTypePayload =
  | ValidatedResponse<'Response', 200, Response>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceUnlinkEndpointFromEventType = Action<
  NotificationServiceUnlinkEndpointFromEventTypePayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceUnlinkEndpointFromEventType = (
    params: NotificationServiceUnlinkEndpointFromEventType
): ActionNotificationServiceUnlinkEndpointFromEventType => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'
    .replace('{endpointId}', params.endpointId.toString())
    .replace('{eventTypeId}', params.eventTypeId.toString());
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// GET /notifications/updates
const NotificationServiceGetNotificationUpdatesParamResponse200 = z.array(
    zodSchemaNotification()
);
type NotificationServiceGetNotificationUpdatesParamResponse200 = z.infer<
  typeof NotificationServiceGetNotificationUpdatesParamResponse200
>;
export type NotificationServiceGetNotificationUpdatesPayload =
  | ValidatedResponse<
      'NotificationServiceGetNotificationUpdatesParamResponse200',
      200,
      NotificationServiceGetNotificationUpdatesParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceGetNotificationUpdates = Action<
  NotificationServiceGetNotificationUpdatesPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceGetNotificationUpdates = (): ActionNotificationServiceGetNotificationUpdates => {
    const path = '/api/notifications/v1.0/notifications/updates';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetNotificationUpdatesParamResponse200,
                type: 'NotificationServiceGetNotificationUpdatesParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /notifications/{id}
const NotificationServiceMarkReadParamBody = z.number().int();
type NotificationServiceMarkReadParamBody = z.infer<
  typeof NotificationServiceMarkReadParamBody
>;
export interface NotificationServiceMarkRead {
  body: NotificationServiceMarkReadParamBody;
}

export type NotificationServiceMarkReadPayload =
  | ValidatedResponse<'Response', 200, Response>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionNotificationServiceMarkRead = Action<
  NotificationServiceMarkReadPayload,
  ActionValidatableConfig
>;
export const actionNotificationServiceMarkRead = (
    params: NotificationServiceMarkRead
): ActionNotificationServiceMarkRead => {
    const path = '/api/notifications/v1.0/notifications/{id}';
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaSetString() {
    return z.array(z.string());
}

export function zodSchemaNewCookie() {
    return z.object({
        domain: z.string().optional().nullable(),
        name: z.string().optional().nullable(),
        path: z.string().optional().nullable(),
        value: z.string().optional().nullable(),
        version: z.number().int().optional().nullable(),
        comment: z.string().optional().nullable(),
        expiry: zodSchemaDate().optional().nullable(),
        httpOnly: z.boolean().optional().nullable(),
        maxAge: z.number().int().optional().nullable(),
        secure: z.boolean().optional().nullable()
    });
}

export function zodSchemaMapStringNewCookie() {
    return z.record(zodSchemaNewCookie());
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEntityTag() {
    return z.object({
        value: z.string().optional().nullable(),
        weak: z.boolean().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringObject() {
    return z.record(z.unknown());
}

export function zodSchemaLocale() {
    return z.object({
        country: z.string().optional().nullable(),
        displayCountry: z.string().optional().nullable(),
        displayLanguage: z.string().optional().nullable(),
        displayName: z.string().optional().nullable(),
        displayScript: z.string().optional().nullable(),
        displayVariant: z.string().optional().nullable(),
        extensionKeys: zodSchemaSetCharacter().optional().nullable(),
        iSO3Country: z.string().optional().nullable(),
        iSO3Language: z.string().optional().nullable(),
        language: z.string().optional().nullable(),
        script: z.string().optional().nullable(),
        unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),
        unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),
        variant: z.string().optional().nullable()
    });
}

export function zodSchemaLink() {
    return z.object({
        params: zodSchemaMapStringString().optional().nullable(),
        rel: z.string().optional().nullable(),
        rels: zodSchemaListString().optional().nullable(),
        title: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        uri: zodSchemaURI().optional().nullable(),
        uriBuilder: zodSchemaUriBuilder().optional().nullable()
    });
}

export function zodSchemaSetLink() {
    return z.array(zodSchemaLink());
}

export function zodSchemaURI() {
    return z.string();
}

export function zodSchemaMediaType() {
    return z.object({
        parameters: zodSchemaMapStringString().optional().nullable(),
        subtype: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        wildcardSubtype: z.boolean().optional().nullable(),
        wildcardType: z.boolean().optional().nullable()
    });
}

export function zodSchemaStatusType() {
    return z.object({
        family: zodSchemaFamily().optional().nullable(),
        reasonPhrase: z.string().optional().nullable(),
        statusCode: z.number().int().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringString() {
    return z.record(z.string());
}

export function zodSchemaFamily() {
    return z.enum([
        'CLIENT_ERROR',
        'INFORMATIONAL',
        'OTHER',
        'REDIRECTION',
        'SERVER_ERROR',
        'SUCCESSFUL'
    ]);
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaListString() {
    return z.array(z.string());
}

export function zodSchemaUriBuilder() {
    return z.unknown();
}

export function zodSchemaSetCharacter() {
    return z.array(z.string());
}

export function zodSchemaResponse() {
    return z.object({
        allowedMethods: zodSchemaSetString().optional().nullable(),
        cookies: zodSchemaMapStringNewCookie().optional().nullable(),
        date: zodSchemaDate().optional().nullable(),
        entity: z.unknown().optional().nullable(),
        entityTag: zodSchemaEntityTag().optional().nullable(),
        headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        language: zodSchemaLocale().optional().nullable(),
        lastModified: zodSchemaDate().optional().nullable(),
        length: z.number().int().optional().nullable(),
        links: zodSchemaSetLink().optional().nullable(),
        location: zodSchemaURI().optional().nullable(),
        mediaType: zodSchemaMediaType().optional().nullable(),
        metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        status: z.number().int().optional().nullable(),
        statusInfo: zodSchemaStatusType().optional().nullable(),
        stringHeaders: zodSchemaMultivaluedMapStringString().optional().nullable()
    });
}

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaBasicAuthentication() {
    return z.object({
        password: z.string().optional().nullable(),
        username: z.string().optional().nullable()
    });
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST', 'PUT' ]);
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        basic_authentication: zodSchemaBasicAuthentication().optional().nullable(),
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST', 'PUT' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email', 'default' ]);
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z
        .union([ zodSchemaWebhookAttributes(), zodSchemaEmailAttributes() ])
        .optional()
        .nullable(),
        type: z.intersection(
            zodSchemaEndpointType(),
            z.enum([ 'webhook', 'email', 'default' ])
        ),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaApplication() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        eventTypes: zodSchemaSetEventType().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaSetEndpoint() {
    return z.array(zodSchemaEndpoint());
}

export function zodSchemaEventType() {
    return z.object({
        application: z
        .lazy(() => zodSchemaApplication())
        .optional()
        .nullable(),
        description: z.string(),
        endpoints: zodSchemaSetEndpoint().optional().nullable(),
        id: z.number().int().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaSetEventType() {
    return z.array(zodSchemaEventType());
}

export function zodSchemaNotification() {
    return z.object({
        endpoint: zodSchemaEndpoint().optional().nullable(),
        payload: z.unknown().optional().nullable(),
        tenant: z.string().optional().nullable()
    });
}

export function zodSchemaJsonObject() {
    return z.array(z.unknown());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/notifications-openapi.json execute input file accepts path 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { actionBuilder } from 'openapi2typescript/react-fetching-library';

export const UUID = zodSchemaUUID();

export const SetString = zodSchemaSetString();

export const NewCookie = zodSchemaNewCookie();

export const MapStringNewCookie = zodSchemaMapStringNewCookie();

export const Date = zodSchemaDate();

export const EntityTag = zodSchemaEntityTag();

export const MultivaluedMapStringObject = zodSchemaMultivaluedMapStringObject();

export const Locale = zodSchemaLocale();

export const Link = zodSchemaLink();

export const SetLink = zodSchemaSetLink();

export const URI = zodSchemaURI();

export const MediaType = zodSchemaMediaType();

export const StatusType = zodSchemaStatusType();

export const MultivaluedMapStringString = zodSchemaMultivaluedMapStringString();

export const Family = zodSchemaFamily();

export const MapStringString = zodSchemaMapStringString();

export const ListString = zodSchemaListString();

export const UriBuilder = zodSchemaUriBuilder();

export const SetCharacter = zodSchemaSetCharacter();

export const Response = zodSchemaResponse();

export const Attributes = zodSchemaAttributes();

export const BasicAuthentication = zodSchemaBasicAuthentication();

export const HttpType = zodSchemaHttpType();

export const WebhookAttributes = zodSchemaWebhookAttributes();

export const EmailAttributes = zodSchemaEmailAttributes();

export const EndpointType = zodSchemaEndpointType();

export const Endpoint = zodSchemaEndpoint();

export const Application = zodSchemaApplication();

export const SetEndpoint = zodSchemaSetEndpoint();

export const EventType = zodSchemaEventType();

export const SetEventType = zodSchemaSetEventType();

export const Notification = zodSchemaNotification();

export const JsonObject = zodSchemaJsonObject();

export const NotificationHistory = zodSchemaNotificationHistory();

// GET /notifications/defaults
const NotificationServiceGetEndpointsForDefaultsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
export const actionNotificationServiceGetEndpointsForDefaults = () => {
    const path = '/api/notifications/v1.0/notifications/defaults';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetEndpointsForDefaultsParamResponse200,
                type: 'NotificationServiceGetEndpointsForDefaultsParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /notifications/defaults/{endpointId}
/*
 Params
'endpointId':UUID
*/
export const actionNotificationServiceAddEndpointToDefaults = (params) => {
    const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(
        '{endpointId}',
        params.endpointId.toString()
    );
    const query = {};
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// DELETE /notifications/defaults/{endpointId}
/*
 Params
'endpointId':UUID
*/
export const actionNotificationServiceDeleteEndpointFromDefaults = (params) => {
    const path = '/api/notifications/v1.0/notifications/defaults/{endpointId}'.replace(
        '{endpointId}',
        params.endpointId.toString()
    );
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// GET /notifications/eventTypes
const NotificationServiceGetEventTypesParamLimit = z.number().int();
const NotificationServiceGetEventTypesParamOffset = z.number().int();
const NotificationServiceGetEventTypesParamPageNumber = z.number().int();
const NotificationServiceGetEventTypesParamSortBy = z.string();
const NotificationServiceGetEventTypesParamResponse200 = z.array(
    zodSchemaEventType()
);
/*
 Params
'limit'?:NotificationServiceGetEventTypesParamLimit,
'offset'?:NotificationServiceGetEventTypesParamOffset,
'pageNumber'?:NotificationServiceGetEventTypesParamPageNumber,
'sortBy'?:NotificationServiceGetEventTypesParamSortBy
*/
export const actionNotificationServiceGetEventTypes = (params) => {
    const path = '/api/notifications/v1.0/notifications/eventTypes';
    const query = {};
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetEventTypesParamResponse200,
                type: 'NotificationServiceGetEventTypesParamResponse200'
            }
        ]
    })
    .build();
};

// GET /notifications/eventTypes/{eventTypeId}
const NotificationServiceGetLinkedEndpointsParamEventTypeId = z.number().int();
const NotificationServiceGetLinkedEndpointsParamLimit = z.number().int();
const NotificationServiceGetLinkedEndpointsParamOffset = z.number().int();
const NotificationServiceGetLinkedEndpointsParamPageNumber = z.number().int();
const NotificationServiceGetLinkedEndpointsParamSortBy = z.string();
const NotificationServiceGetLinkedEndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
/*
 Params
'eventTypeId':NotificationServiceGetLinkedEndpointsParamEventTypeId,
'limit'?:NotificationServiceGetLinkedEndpointsParamLimit,
'offset'?:NotificationServiceGetLinkedEndpointsParamOffset,
'pageNumber'?:NotificationServiceGetLinkedEndpointsParamPageNumber,
'sortBy'?:NotificationServiceGetLinkedEndpointsParamSortBy
*/
export const actionNotificationServiceGetLinkedEndpoints = (params) => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}'.replace(
        '{eventTypeId}',
        params.eventTypeId.toString()
    );
    const query = {};
    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.pageNumber !== undefined) {
        query.pageNumber = params.pageNumber.toString();
    }

    if (params.sortBy !== undefined) {
        query.sort_by = params.sortBy.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetLinkedEndpointsParamResponse200,
                type: 'NotificationServiceGetLinkedEndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// PUT /notifications/eventTypes/{eventTypeId}/{endpointId}
const NotificationServiceLinkEndpointToEventTypeParamEventTypeId = z
.number()
.int();
const NotificationServiceLinkEndpointToEventTypeParamResponse200 = z.string();
/*
 Params
'endpointId':UUID,
'eventTypeId':NotificationServiceLinkEndpointToEventTypeParamEventTypeId
*/
export const actionNotificationServiceLinkEndpointToEventType = (params) => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'
    .replace('{endpointId}', params.endpointId.toString())
    .replace('{eventTypeId}', params.eventTypeId.toString());
    const query = {};
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceLinkEndpointToEventTypeParamResponse200,
                type: 'NotificationServiceLinkEndpointToEventTypeParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /notifications/eventTypes/{eventTypeId}/{endpointId}
const NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId = z
.number()
.int();
/*
 Params
'endpointId':UUID,
'eventTypeId':NotificationServiceUnlinkEndpointFromEventTypeParamEventTypeId
*/
export const actionNotificationServiceUnlinkEndpointFromEventType = (
    params
) => {
    const path = '/api/notifications/v1.0/notifications/eventTypes/{eventTypeId}/{endpointId}'
    .replace('{endpointId}', params.endpointId.toString())
    .replace('{eventTypeId}', params.eventTypeId.toString());
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

// GET /notifications/updates
const NotificationServiceGetNotificationUpdatesParamResponse200 = z.array(
    zodSchemaNotification()
);
export const actionNotificationServiceGetNotificationUpdates = () => {
    const path = '/api/notifications/v1.0/notifications/updates';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: NotificationServiceGetNotificationUpdatesParamResponse200,
                type: 'NotificationServiceGetNotificationUpdatesParamResponse200'
            }
        ]
    })
    .build();
};

// DELETE /notifications/{id}
const NotificationServiceMarkReadParamBody = z.number().int();
/*
 Params
body: NotificationServiceMarkReadParamBody
*/
export const actionNotificationServiceMarkRead = (params) => {
    const path = '/api/notifications/v1.0/notifications/{id}';
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Response, type: 'Response' }]
    })
    .build();
};

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaSetString() {
    return z.array(z.string());
}

export function zodSchemaNewCookie() {
    return z.object({
        domain: z.string().optional().nullable(),
        name: z.string().optional().nullable(),
        path: z.string().optional().nullable(),
        value: z.string().optional().nullable(),
        version: z.number().int().optional().nullable(),
        comment: z.string().optional().nullable(),
        expiry: zodSchemaDate().optional().nullable(),
        httpOnly: z.boolean().optional().nullable(),
        maxAge: z.number().int().optional().nullable(),
        secure: z.boolean().optional().nullable()
    });
}

export function zodSchemaMapStringNewCookie() {
    return z.record(zodSchemaNewCookie());
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEntityTag() {
    return z.object({
        value: z.string().optional().nullable(),
        weak: z.boolean().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringObject() {
    return z.record(z.unknown());
}

export function zodSchemaLocale() {
    return z.object({
        country: z.string().optional().nullable(),
        displayCountry: z.string().optional().nullable(),
        displayLanguage: z.string().optional().nullable(),
        displayName: z.string().optional().nullable(),
        displayScript: z.string().optional().nullable(),
        displayVariant: z.string().optional().nullable(),
        extensionKeys: zodSchemaSetCharacter().optional().nullable(),
        iSO3Country: z.string().optional().nullable(),
        iSO3Language: z.string().optional().nullable(),
        language: z.string().optional().nullable(),
        script: z.string().optional().nullable(),
        unicodeLocaleAttributes: zodSchemaSetString().optional().nullable(),
        unicodeLocaleKeys: zodSchemaSetString().optional().nullable(),
        variant: z.string().optional().nullable()
    });
}

export function zodSchemaLink() {
    return z.object({
        params: zodSchemaMapStringString().optional().nullable(),
        rel: z.string().optional().nullable(),
        rels: zodSchemaListString().optional().nullable(),
        title: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        uri: zodSchemaURI().optional().nullable(),
        uriBuilder: zodSchemaUriBuilder().optional().nullable()
    });
}

export function zodSchemaSetLink() {
    return z.array(zodSchemaLink());
}

export function zodSchemaURI() {
    return z.string();
}

export function zodSchemaMediaType() {
    return z.object({
        parameters: zodSchemaMapStringString().optional().nullable(),
        subtype: z.string().optional().nullable(),
        type: z.string().optional().nullable(),
        wildcardSubtype: z.boolean().optional().nullable(),
        wildcardType: z.boolean().optional().nullable()
    });
}

export function zodSchemaStatusType() {
    return z.object({
        family: zodSchemaFamily().optional().nullable(),
        reasonPhrase: z.string().optional().nullable(),
        statusCode: z.number().int().optional().nullable()
    });
}

export function zodSchemaMultivaluedMapStringString() {
    return z.record(z.string());
}

export function zodSchemaFamily() {
    return z.enum([
        'CLIENT_ERROR',
        'INFORMATIONAL',
        'OTHER',
        'REDIRECTION',
        'SERVER_ERROR',
        'SUCCESSFUL'
    ]);
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaListString() {
    return z.array(z.string());
}

export function zodSchemaUriBuilder() {
    return z.unknown();
}

export function zodSchemaSetCharacter() {
    return z.array(z.string());
}

export function zodSchemaResponse() {
    return z.object({
        allowedMethods: zodSchemaSetString().optional().nullable(),
        cookies: zodSchemaMapStringNewCookie().optional().nullable(),
        date: zodSchemaDate().optional().nullable(),
        entity: z.unknown().optional().nullable(),
        entityTag: zodSchemaEntityTag().optional().nullable(),
        headers: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        language: zodSchemaLocale().optional().nullable(),
        lastModified: zodSchemaDate().optional().nullable(),
        length: z.number().int().optional().nullable(),
        links: zodSchemaSetLink().optional().nullable(),
        location: zodSchemaURI().optional().nullable(),
        mediaType: zodSchemaMediaType().optional().nullable(),
        metadata: zodSchemaMultivaluedMapStringObject().optional().nullable(),
        status: z.number().int().optional().nullable(),
        statusInfo: zodSchemaStatusType().optional().nullable(),
        stringHeaders: zodSchemaMultivaluedMapStringString().optional().nullable()
    });
}

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaBasicAuthentication() {
    return z.object({
        password: z.string().optional().nullable(),
        username: z.string().optional().nullable()
    });
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST', 'PUT' ]);
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        basic_authentication: zodSchemaBasicAuthentication().optional().nullable(),
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST', 'PUT' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email', 'default' ]);
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z
        .union([ zodSchemaWebhookAttributes(), zodSchemaEmailAttributes() ])
        .optional()
        .nullable(),
        type: z.intersection(
            zodSchemaEndpointType(),
            z.enum([ 'webhook', 'email', 'default' ])
        ),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaApplication() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        eventTypes: zodSchemaSetEventType().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaSetEndpoint() {
    return z.array(zodSchemaEndpoint());
}

export function zodSchemaEventType() {
    return z.object({
        application: z
        .lazy(() => zodSchemaApplication())
        .optional()
        .nullable(),
        description: z.string(),
        endpoints: zodSchemaSetEndpoint().optional().nullable(),
        id: z.number().int().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaSetEventType() {
    return z.array(zodSchemaEventType());
}

export function zodSchemaNotification() {
    return z.object({
        endpoint: zodSchemaEndpoint().optional().nullable(),
        payload: z.unknown().optional().nullable(),
        tenant: z.string().optional().nullable()
    });
}

export function zodSchemaJsonObject() {
    return z.array(z.unknown());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/policies-openapi.json execute accepts urls 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { ValidatedResponse } from 'openapi2typescript';
import { Action } from 'react-fetching-library';
import {
    actionBuilder,
    ActionValidatableConfig
} from 'openapi2typescript/react-fetching-library';

export const Policy = zodSchemaPolicy();
export type Policy = z.infer<typeof Policy>;

export const Meta = zodSchemaMeta();
export type Meta = z.infer<typeof Meta>;

export const MapStringString = zodSchemaMapStringString();
export type MapStringString = z.infer<typeof MapStringString>;

export const HistoryItem = zodSchemaHistoryItem();
export type HistoryItem = z.infer<typeof HistoryItem>;

export const Fact = zodSchemaFact();
export type Fact = z.infer<typeof Fact>;

export const PagedResponseOfHistoryItem = zodSchemaPagedResponseOfHistoryItem();
export type PagedResponseOfHistoryItem = z.infer<
  typeof PagedResponseOfHistoryItem
>;

export const FactType = zodSchemaFactType();
export type FactType = z.infer<typeof FactType>;

export const ListUUID = zodSchemaListUUID();
export type ListUUID = z.infer<typeof ListUUID>;

export const PagedResponseOfPolicy = zodSchemaPagedResponseOfPolicy();
export type PagedResponseOfPolicy = z.infer<typeof PagedResponseOfPolicy>;

export const List = zodSchemaList();
export type List = z.infer<typeof List>;

export const ListPolicy = zodSchemaListPolicy();
export type ListPolicy = z.infer<typeof ListPolicy>;

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export const ListHistoryItem = zodSchemaListHistoryItem();
export type ListHistoryItem = z.infer<typeof ListHistoryItem>;

export const __Empty = zodSchema__Empty();
export type __Empty = z.infer<typeof __Empty>;

// POST /policies/{id}/enabled
// Enable/disable a policy
const PostPoliciesByIdEnabledParamEnabled = z.boolean();
type PostPoliciesByIdEnabledParamEnabled = z.infer<
  typeof PostPoliciesByIdEnabledParamEnabled
>;
export interface PostPoliciesByIdEnabled {
  id: UUID;
  enabled?: PostPoliciesByIdEnabledParamEnabled;
}

export type PostPoliciesByIdEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesByIdEnabled = Action<
  PostPoliciesByIdEnabledPayload,
  ActionValidatableConfig
>;
export const actionPostPoliciesByIdEnabled = (
    params: PostPoliciesByIdEnabled
): ActionPostPoliciesByIdEnabled => {
    const path = '/api/policies/v1.0/policies/{id}/enabled'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.enabled !== undefined) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /status
export type GetStatusPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetStatus = Action<GetStatusPayload, ActionValidatableConfig>;
export const actionGetStatus = (): ActionGetStatus => {
    const path = '/api/policies/v1.0/status';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// POST /policies/ids/enabled
// Enable/disable policies identified by list of uuid in body
const PostPoliciesIdsEnabledParamEnabled = z.boolean();
type PostPoliciesIdsEnabledParamEnabled = z.infer<
  typeof PostPoliciesIdsEnabledParamEnabled
>;
export interface PostPoliciesIdsEnabled {
  enabled?: PostPoliciesIdsEnabledParamEnabled;
  body: ListUUID;
}

export type PostPoliciesIdsEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesIdsEnabled = Action<
  PostPoliciesIdsEnabledPayload,
  ActionValidatableConfig
>;
export const actionPostPoliciesIdsEnabled = (
    params: PostPoliciesIdsEnabled
): ActionPostPoliciesIdsEnabled => {
    const path = '/api/policies/v1.0/policies/ids/enabled';
    const query = {} as Record<string, any>;
    if (params.enabled !== undefined) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /facts
// Retrieve a list of fact (keys) along with their data types
const GetFactsParamResponse200 = z.array(zodSchemaFact());
type GetFactsParamResponse200 = z.infer<typeof GetFactsParamResponse200>;
export type GetFactsPayload =
  | ValidatedResponse<'GetFactsParamResponse200', 200, GetFactsParamResponse200>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetFacts = Action<GetFactsPayload, ActionValidatableConfig>;
export const actionGetFacts = (): ActionGetFacts => {
    const path = '/api/policies/v1.0/facts';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetFactsParamResponse200,
                type: 'GetFactsParamResponse200'
            }
        ]
    })
    .build();
};

// GET /policies
// Return all policies for a given account
const GetPoliciesParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpDescription = z.infer<
  typeof GetPoliciesParamFilterOpDescription
>;
const GetPoliciesParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpName = z.infer<
  typeof GetPoliciesParamFilterOpName
>;
const GetPoliciesParamFilterDescription = z.string();
type GetPoliciesParamFilterDescription = z.infer<
  typeof GetPoliciesParamFilterDescription
>;
const GetPoliciesParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesParamFilterIsEnabled = z.infer<
  typeof GetPoliciesParamFilterIsEnabled
>;
const GetPoliciesParamFilterName = z.string();
type GetPoliciesParamFilterName = z.infer<typeof GetPoliciesParamFilterName>;
const GetPoliciesParamLimit = z.number().int();
type GetPoliciesParamLimit = z.infer<typeof GetPoliciesParamLimit>;
const GetPoliciesParamOffset = z.number().int();
type GetPoliciesParamOffset = z.infer<typeof GetPoliciesParamOffset>;
const GetPoliciesParamSortColumn = z.enum([
    'name',
    'description',
    'is_enabled',
    'mtime'
]);
type GetPoliciesParamSortColumn = z.infer<typeof GetPoliciesParamSortColumn>;
const GetPoliciesParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesParamSortDirection = z.infer<
  typeof GetPoliciesParamSortDirection
>;
export interface GetPolicies {
  filterOpDescription?: GetPoliciesParamFilterOpDescription;
  filterOpName?: GetPoliciesParamFilterOpName;
  filterDescription?: GetPoliciesParamFilterDescription;
  filterIsEnabled?: GetPoliciesParamFilterIsEnabled;
  filterName?: GetPoliciesParamFilterName;
  limit?: GetPoliciesParamLimit;
  offset?: GetPoliciesParamOffset;
  sortColumn?: GetPoliciesParamSortColumn;
  sortDirection?: GetPoliciesParamSortDirection;
}

export type GetPoliciesPayload =
  | ValidatedResponse<'PagedResponseOfPolicy', 200, PagedResponseOfPolicy>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPolicies = Action<
  GetPoliciesPayload,
  ActionValidatableConfig
>;
export const actionGetPolicies = (params: GetPolicies): ActionGetPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription !== undefined) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription !== undefined) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled !== undefined) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn !== undefined) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection !== undefined) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfPolicy,
                type: 'PagedResponseOfPolicy'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// POST /policies
// Validate (and possibly persist) a passed policy for the given account
const PostPoliciesParamAlsoStore = z.boolean();
type PostPoliciesParamAlsoStore = z.infer<typeof PostPoliciesParamAlsoStore>;
const PostPoliciesParamResponse400 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse400 = z.infer<
  typeof PostPoliciesParamResponse400
>;
const PostPoliciesParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse409 = z.infer<
  typeof PostPoliciesParamResponse409
>;
export interface PostPolicies {
  alsoStore?: PostPoliciesParamAlsoStore;
  body: Policy;
}

export type PostPoliciesPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'Policy', 201, Policy>
  | ValidatedResponse<
      'PostPoliciesParamResponse400',
      400,
      PostPoliciesParamResponse400
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<
      'PostPoliciesParamResponse409',
      409,
      PostPoliciesParamResponse409
    >
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPolicies = Action<
  PostPoliciesPayload,
  ActionValidatableConfig
>;
export const actionPostPolicies = (
    params: PostPolicies
): ActionPostPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.alsoStore !== undefined) {
        query.alsoStore = params.alsoStore.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 201, zod: Policy, type: 'Policy' },
            {
                status: 400,
                zod: PostPoliciesParamResponse400,
                type: 'PostPoliciesParamResponse400'
            },
            { status: 403, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PostPoliciesParamResponse409,
                type: 'PostPoliciesParamResponse409'
            },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /policies/{id}
// Retrieve a single policy for a customer by its id
export interface GetPoliciesById {
  id: UUID;
}

export type GetPoliciesByIdPayload =
  | ValidatedResponse<'Policy', 200, Policy>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesById = Action<
  GetPoliciesByIdPayload,
  ActionValidatableConfig
>;
export const actionGetPoliciesById = (
    params: GetPoliciesById
): ActionGetPoliciesById => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: Policy, type: 'Policy' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// DELETE /policies/{id}
// Delete a single policy for a customer by its id
export interface DeletePoliciesById {
  id: UUID;
}

export type DeletePoliciesByIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesById = Action<
  DeletePoliciesByIdPayload,
  ActionValidatableConfig
>;
export const actionDeletePoliciesById = (
    params: DeletePoliciesById
): ActionDeletePoliciesById => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// PUT /policies/{policyId}
// Update a single policy for a customer by its id
const PutPoliciesByPolicyIdParamDry = z.boolean();
type PutPoliciesByPolicyIdParamDry = z.infer<
  typeof PutPoliciesByPolicyIdParamDry
>;
const PutPoliciesByPolicyIdParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PutPoliciesByPolicyIdParamResponse409 = z.infer<
  typeof PutPoliciesByPolicyIdParamResponse409
>;
export interface PutPoliciesByPolicyId {
  policyId: UUID;
  dry?: PutPoliciesByPolicyIdParamDry;
  body: Policy;
}

export type PutPoliciesByPolicyIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<
      'PutPoliciesByPolicyIdParamResponse409',
      409,
      PutPoliciesByPolicyIdParamResponse409
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutPoliciesByPolicyId = Action<
  PutPoliciesByPolicyIdPayload,
  ActionValidatableConfig
>;
export const actionPutPoliciesByPolicyId = (
    params: PutPoliciesByPolicyId
): ActionPutPoliciesByPolicyId => {
    const path = '/api/policies/v1.0/policies/{policyId}'.replace(
        '{policyId}',
        params.policyId.toString()
    );
    const query = {} as Record<string, any>;
    if (params.dry !== undefined) {
        query.dry = params.dry.toString();
    }

    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PutPoliciesByPolicyIdParamResponse409,
                type: 'PutPoliciesByPolicyIdParamResponse409'
            }
        ]
    })
    .build();
};

// POST /policies/validate-name
// Validates the Policy.name and verifies if it is unique.
const PostPoliciesValidateNameParamBody = z.string();
type PostPoliciesValidateNameParamBody = z.infer<
  typeof PostPoliciesValidateNameParamBody
>;
export interface PostPoliciesValidateName {
  id?: UUID;
  body: PostPoliciesValidateNameParamBody;
}

export type PostPoliciesValidateNamePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 409, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidateName = Action<
  PostPoliciesValidateNamePayload,
  ActionValidatableConfig
>;
export const actionPostPoliciesValidateName = (
    params: PostPoliciesValidateName
): ActionPostPoliciesValidateName => {
    const path = '/api/policies/v1.0/policies/validate-name';
    const query = {} as Record<string, any>;
    if (params.id !== undefined) {
        query.id = params.id.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 409, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /policies/ids
// Return all policy ids for a given account after applying the filters
const GetPoliciesIdsParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpDescription = z.infer<
  typeof GetPoliciesIdsParamFilterOpDescription
>;
const GetPoliciesIdsParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpName = z.infer<
  typeof GetPoliciesIdsParamFilterOpName
>;
const GetPoliciesIdsParamFilterDescription = z.string();
type GetPoliciesIdsParamFilterDescription = z.infer<
  typeof GetPoliciesIdsParamFilterDescription
>;
const GetPoliciesIdsParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesIdsParamFilterIsEnabled = z.infer<
  typeof GetPoliciesIdsParamFilterIsEnabled
>;
const GetPoliciesIdsParamFilterName = z.string();
type GetPoliciesIdsParamFilterName = z.infer<
  typeof GetPoliciesIdsParamFilterName
>;
export interface GetPoliciesIds {
  filterOpDescription?: GetPoliciesIdsParamFilterOpDescription;
  filterOpName?: GetPoliciesIdsParamFilterOpName;
  filterDescription?: GetPoliciesIdsParamFilterDescription;
  filterIsEnabled?: GetPoliciesIdsParamFilterIsEnabled;
  filterName?: GetPoliciesIdsParamFilterName;
}

export type GetPoliciesIdsPayload =
  | ValidatedResponse<'List', 200, List>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesIds = Action<
  GetPoliciesIdsPayload,
  ActionValidatableConfig
>;
export const actionGetPoliciesIds = (
    params: GetPoliciesIds
): ActionGetPoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription !== undefined) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription !== undefined) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled !== undefined) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: List, type: 'List' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// DELETE /policies/ids
// Delete policies for a customer by the ids passed in the body. Result will be a list of deleted UUIDs
const DeletePoliciesIdsParamResponse200 = z.array(zodSchemaUUID());
type DeletePoliciesIdsParamResponse200 = z.infer<
  typeof DeletePoliciesIdsParamResponse200
>;
export interface DeletePoliciesIds {
  body: ListUUID;
}

export type DeletePoliciesIdsPayload =
  | ValidatedResponse<
      'DeletePoliciesIdsParamResponse200',
      200,
      DeletePoliciesIdsParamResponse200
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesIds = Action<
  DeletePoliciesIdsPayload,
  ActionValidatableConfig
>;
export const actionDeletePoliciesIds = (
    params: DeletePoliciesIds
): ActionDeletePoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: DeletePoliciesIdsParamResponse200,
                type: 'DeletePoliciesIdsParamResponse200'
            },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// POST /policies/validate
// Validates a Policy condition
export interface PostPoliciesValidate {
  body: Policy;
}

export type PostPoliciesValidatePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidate = Action<
  PostPoliciesValidatePayload,
  ActionValidatableConfig
>;
export const actionPostPoliciesValidate = (
    params: PostPoliciesValidate
): ActionPostPoliciesValidate => {
    const path = '/api/policies/v1.0/policies/validate';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /
// Just a filler to have a defined return code for the base path
export type GetPayload =
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGet = Action<GetPayload, ActionValidatableConfig>;
export const actionGet = (): ActionGet => {
    const path = '/api/policies/v1.0/';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 404, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// GET /policies/{id}/history/trigger
// Retrieve the trigger history of a single policy
const GetPoliciesByIdHistoryTriggerParamFilterOpId = z.enum([
    'equal',
    'not_equal',
    'like'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpId
>;
const GetPoliciesByIdHistoryTriggerParamFilterOpName = z.enum([
    'equal',
    'like',
    'not_equal'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpName
>;
const GetPoliciesByIdHistoryTriggerParamFilterId = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterId
>;
const GetPoliciesByIdHistoryTriggerParamFilterName = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterName
>;
const GetPoliciesByIdHistoryTriggerParamLimit = z.number().int();
type GetPoliciesByIdHistoryTriggerParamLimit = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamLimit
>;
const GetPoliciesByIdHistoryTriggerParamOffset = z.number().int();
type GetPoliciesByIdHistoryTriggerParamOffset = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamOffset
>;
const GetPoliciesByIdHistoryTriggerParamSortColumn = z.enum([
    'hostName',
    'id',
    'ctime'
]);
type GetPoliciesByIdHistoryTriggerParamSortColumn = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortColumn
>;
const GetPoliciesByIdHistoryTriggerParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesByIdHistoryTriggerParamSortDirection = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortDirection
>;
export interface GetPoliciesByIdHistoryTrigger {
  id: UUID;
  filterOpId?: GetPoliciesByIdHistoryTriggerParamFilterOpId;
  filterOpName?: GetPoliciesByIdHistoryTriggerParamFilterOpName;
  filterId?: GetPoliciesByIdHistoryTriggerParamFilterId;
  filterName?: GetPoliciesByIdHistoryTriggerParamFilterName;
  limit?: GetPoliciesByIdHistoryTriggerParamLimit;
  offset?: GetPoliciesByIdHistoryTriggerParamOffset;
  sortColumn?: GetPoliciesByIdHistoryTriggerParamSortColumn;
  sortDirection?: GetPoliciesByIdHistoryTriggerParamSortDirection;
}

export type GetPoliciesByIdHistoryTriggerPayload =
  | ValidatedResponse<
      'PagedResponseOfHistoryItem',
      200,
      PagedResponseOfHistoryItem
    >
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesByIdHistoryTrigger = Action<
  GetPoliciesByIdHistoryTriggerPayload,
  ActionValidatableConfig
>;
export const actionGetPoliciesByIdHistoryTrigger = (
    params: GetPoliciesByIdHistoryTrigger
): ActionGetPoliciesByIdHistoryTrigger => {
    const path = '/api/policies/v1.0/policies/{id}/history/trigger'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.filterOpId !== undefined) {
        query['filter:op[id]'] = params.filterOpId.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterId !== undefined) {
        query['filter[id]'] = params.filterId.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn !== undefined) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection !== undefined) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfHistoryItem,
                type: 'PagedResponseOfHistoryItem'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

export function zodSchemaPolicy() {
    return z.object({
        actions: z.string().optional().nullable(),
        conditions: z.string(),
        ctime: z.string().optional().nullable(),
        description: z.string().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        isEnabled: z.boolean().optional().nullable(),
        lastTriggered: z.number().int().optional().nullable(),
        mtime: z.string().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaMeta() {
    return z.object({
        count: z.number().int().optional().nullable()
    });
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaHistoryItem() {
    return z.object({
        ctime: z.number().int().optional().nullable(),
        hostName: z.string().optional().nullable(),
        id: z.string().optional().nullable()
    });
}

export function zodSchemaFact() {
    return z.object({
        id: z.number().int().optional().nullable(),
        name: z.string().optional().nullable(),
        type: zodSchemaFactType().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfHistoryItem() {
    return z.object({
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable(),
        data: zodSchemaListHistoryItem().optional().nullable()
    });
}

export function zodSchemaFactType() {
    return z.enum([ 'BOOLEAN', 'INT', 'LIST', 'STRING' ]);
}

export function zodSchemaListUUID() {
    return z.array(z.string());
}

export function zodSchemaPagedResponseOfPolicy() {
    return z.object({
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable(),
        data: zodSchemaListPolicy().optional().nullable()
    });
}

export function zodSchemaList() {
    return z.array(z.unknown());
}

export function zodSchemaListPolicy() {
    return z.array(zodSchemaPolicy());
}

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaListHistoryItem() {
    return z.array(zodSchemaHistoryItem());
}

export function zodSchema__Empty() {
    return z.string().max(0).optional();
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/policies-openapi.json execute input file accepts path 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { actionBuilder } from 'openapi2typescript/react-fetching-library';

export const Policy = zodSchemaPolicy();

export const Meta = zodSchemaMeta();

export const MapStringString = zodSchemaMapStringString();

export const HistoryItem = zodSchemaHistoryItem();

export const Fact = zodSchemaFact();

export const PagedResponseOfHistoryItem = zodSchemaPagedResponseOfHistoryItem();

export const FactType = zodSchemaFactType();

export const ListUUID = zodSchemaListUUID();

export const PagedResponseOfPolicy = zodSchemaPagedResponseOfPolicy();

export const List = zodSchemaList();

export const ListPolicy = zodSchemaListPolicy();

export const UUID = zodSchemaUUID();

export const ListHistoryItem = zodSchemaListHistoryItem();

export const __Empty = zodSchema__Empty();

// POST /policies/{id}/enabled
// Enable/disable a policy
const PostPoliciesByIdEnabledParamEnabled = z.boolean();
/*
 Params
'id':UUID,
'enabled'?:PostPoliciesByIdEnabledParamEnabled
*/
export const actionPostPoliciesByIdEnabled = (params) => {
    const path = '/api/policies/v1.0/policies/{id}/enabled'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    if (params.enabled !== undefined) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /status
export const actionGetStatus = () => {
    const path = '/api/policies/v1.0/status';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// POST /policies/ids/enabled
// Enable/disable policies identified by list of uuid in body
const PostPoliciesIdsEnabledParamEnabled = z.boolean();
/*
 Params
'enabled'?:PostPoliciesIdsEnabledParamEnabled,
body: ListUUID
*/
export const actionPostPoliciesIdsEnabled = (params) => {
    const path = '/api/policies/v1.0/policies/ids/enabled';
    const query = {};
    if (params.enabled !== undefined) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /facts
// Retrieve a list of fact (keys) along with their data types
const GetFactsParamResponse200 = z.array(zodSchemaFact());
export const actionGetFacts = () => {
    const path = '/api/policies/v1.0/facts';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetFactsParamResponse200,
                type: 'GetFactsParamResponse200'
            }
        ]
    })
    .build();
};

// GET /policies
// Return all policies for a given account
const GetPoliciesParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
const GetPoliciesParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
const GetPoliciesParamFilterDescription = z.string();
const GetPoliciesParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
const GetPoliciesParamFilterName = z.string();
const GetPoliciesParamLimit = z.number().int();
const GetPoliciesParamOffset = z.number().int();
const GetPoliciesParamSortColumn = z.enum([
    'name',
    'description',
    'is_enabled',
    'mtime'
]);
const GetPoliciesParamSortDirection = z.enum([ 'asc', 'desc' ]);
/*
 Params
'filterOpDescription'?:GetPoliciesParamFilterOpDescription,
'filterOpName'?:GetPoliciesParamFilterOpName,
'filterDescription'?:GetPoliciesParamFilterDescription,
'filterIsEnabled'?:GetPoliciesParamFilterIsEnabled,
'filterName'?:GetPoliciesParamFilterName,
'limit'?:GetPoliciesParamLimit,
'offset'?:GetPoliciesParamOffset,
'sortColumn'?:GetPoliciesParamSortColumn,
'sortDirection'?:GetPoliciesParamSortDirection
*/
export const actionGetPolicies = (params) => {
    const path = '/api/policies/v1.0/policies';
    const query = {};
    if (params.filterOpDescription !== undefined) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription !== undefined) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled !== undefined) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn !== undefined) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection !== undefined) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfPolicy,
                type: 'PagedResponseOfPolicy'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// POST /policies
// Validate (and possibly persist) a passed policy for the given account
const PostPoliciesParamAlsoStore = z.boolean();
const PostPoliciesParamResponse400 = z.object({
    msg: z.string().optional().nullable()
});
const PostPoliciesParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
/*
 Params
'alsoStore'?:PostPoliciesParamAlsoStore,
body: Policy
*/
export const actionPostPolicies = (params) => {
    const path = '/api/policies/v1.0/policies';
    const query = {};
    if (params.alsoStore !== undefined) {
        query.alsoStore = params.alsoStore.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 201, zod: Policy, type: 'Policy' },
            {
                status: 400,
                zod: PostPoliciesParamResponse400,
                type: 'PostPoliciesParamResponse400'
            },
            { status: 403, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PostPoliciesParamResponse409,
                type: 'PostPoliciesParamResponse409'
            },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /policies/{id}
// Retrieve a single policy for a customer by its id
/*
 Params
'id':UUID
*/
export const actionGetPoliciesById = (params) => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: Policy, type: 'Policy' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// DELETE /policies/{id}
// Delete a single policy for a customer by its id
/*
 Params
'id':UUID
*/
export const actionDeletePoliciesById = (params) => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// PUT /policies/{policyId}
// Update a single policy for a customer by its id
const PutPoliciesByPolicyIdParamDry = z.boolean();
const PutPoliciesByPolicyIdParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
/*
 Params
'policyId':UUID,
'dry'?:PutPoliciesByPolicyIdParamDry,
body: Policy
*/
export const actionPutPoliciesByPolicyId = (params) => {
    const path = '/api/policies/v1.0/policies/{policyId}'.replace(
        '{policyId}',
        params.policyId.toString()
    );
    const query = {};
    if (params.dry !== undefined) {
        query.dry = params.dry.toString();
    }

    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PutPoliciesByPolicyIdParamResponse409,
                type: 'PutPoliciesByPolicyIdParamResponse409'
            }
        ]
    })
    .build();
};

// POST /policies/validate-name
// Validates the Policy.name and verifies if it is unique.
const PostPoliciesValidateNameParamBody = z.string();
/*
 Params
'id'?:UUID,
body: PostPoliciesValidateNameParamBody
*/
export const actionPostPoliciesValidateName = (params) => {
    const path = '/api/policies/v1.0/policies/validate-name';
    const query = {};
    if (params.id !== undefined) {
        query.id = params.id.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 409, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /policies/ids
// Return all policy ids for a given account after applying the filters
const GetPoliciesIdsParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
const GetPoliciesIdsParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
const GetPoliciesIdsParamFilterDescription = z.string();
const GetPoliciesIdsParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
const GetPoliciesIdsParamFilterName = z.string();
/*
 Params
'filterOpDescription'?:GetPoliciesIdsParamFilterOpDescription,
'filterOpName'?:GetPoliciesIdsParamFilterOpName,
'filterDescription'?:GetPoliciesIdsParamFilterDescription,
'filterIsEnabled'?:GetPoliciesIdsParamFilterIsEnabled,
'filterName'?:GetPoliciesIdsParamFilterName
*/
export const actionGetPoliciesIds = (params) => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {};
    if (params.filterOpDescription !== undefined) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription !== undefined) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled !== undefined) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: List, type: 'List' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// DELETE /policies/ids
// Delete policies for a customer by the ids passed in the body. Result will be a list of deleted UUIDs
const DeletePoliciesIdsParamResponse200 = z.array(zodSchemaUUID());
/*
 Params
body: ListUUID
*/
export const actionDeletePoliciesIds = (params) => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: DeletePoliciesIdsParamResponse200,
                type: 'DeletePoliciesIdsParamResponse200'
            },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// POST /policies/validate
// Validates a Policy condition
/*
 Params
body: Policy
*/
export const actionPostPoliciesValidate = (params) => {
    const path = '/api/policies/v1.0/policies/validate';
    const query = {};
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// GET /
// Just a filler to have a defined return code for the base path
export const actionGet = () => {
    const path = '/api/policies/v1.0/';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 404, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// GET /policies/{id}/history/trigger
// Retrieve the trigger history of a single policy
const GetPoliciesByIdHistoryTriggerParamFilterOpId = z.enum([
    'equal',
    'not_equal',
    'like'
]);
const GetPoliciesByIdHistoryTriggerParamFilterOpName = z.enum([
    'equal',
    'like',
    'not_equal'
]);
const GetPoliciesByIdHistoryTriggerParamFilterId = z.string();
const GetPoliciesByIdHistoryTriggerParamFilterName = z.string();
const GetPoliciesByIdHistoryTriggerParamLimit = z.number().int();
const GetPoliciesByIdHistoryTriggerParamOffset = z.number().int();
const GetPoliciesByIdHistoryTriggerParamSortColumn = z.enum([
    'hostName',
    'id',
    'ctime'
]);
const GetPoliciesByIdHistoryTriggerParamSortDirection = z.enum([ 'asc', 'desc' ]);
/*
 Params
'id':UUID,
'filterOpId'?:GetPoliciesByIdHistoryTriggerParamFilterOpId,
'filterOpName'?:GetPoliciesByIdHistoryTriggerParamFilterOpName,
'filterId'?:GetPoliciesByIdHistoryTriggerParamFilterId,
'filterName'?:GetPoliciesByIdHistoryTriggerParamFilterName,
'limit'?:GetPoliciesByIdHistoryTriggerParamLimit,
'offset'?:GetPoliciesByIdHistoryTriggerParamOffset,
'sortColumn'?:GetPoliciesByIdHistoryTriggerParamSortColumn,
'sortDirection'?:GetPoliciesByIdHistoryTriggerParamSortDirection
*/
export const actionGetPoliciesByIdHistoryTrigger = (params) => {
    const path = '/api/policies/v1.0/policies/{id}/history/trigger'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {};
    if (params.filterOpId !== undefined) {
        query['filter:op[id]'] = params.filterOpId.toString();
    }

    if (params.filterOpName !== undefined) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterId !== undefined) {
        query['filter[id]'] = params.filterId.toString();
    }

    if (params.filterName !== undefined) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit !== undefined) {
        query.limit = params.limit.toString();
    }

    if (params.offset !== undefined) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn !== undefined) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection !== undefined) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfHistoryItem,
                type: 'PagedResponseOfHistoryItem'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

export function zodSchemaPolicy() {
    return z.object({
        actions: z.string().optional().nullable(),
        conditions: z.string(),
        ctime: z.string().optional().nullable(),
        description: z.string().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        isEnabled: z.boolean().optional().nullable(),
        lastTriggered: z.number().int().optional().nullable(),
        mtime: z.string().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaMeta() {
    return z.object({
        count: z.number().int().optional().nullable()
    });
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaHistoryItem() {
    return z.object({
        ctime: z.number().int().optional().nullable(),
        hostName: z.string().optional().nullable(),
        id: z.string().optional().nullable()
    });
}

export function zodSchemaFact() {
    return z.object({
        id: z.number().int().optional().nullable(),
        name: z.string().optional().nullable(),
        type: zodSchemaFactType().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfHistoryItem() {
    return z.object({
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable(),
        data: zodSchemaListHistoryItem().optional().nullable()
    });
}

export function zodSchemaFactType() {
    return z.enum([ 'BOOLEAN', 'INT', 'LIST', 'STRING' ]);
}

export function zodSchemaListUUID() {
    return z.array(z.string());
}

export function zodSchemaPagedResponseOfPolicy() {
    return z.object({
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable(),
        data: zodSchemaListPolicy().optional().nullable()
    });
}

export function zodSchemaList() {
    return z.array(z.unknown());
}

export function zodSchemaListPolicy() {
    return z.array(zodSchemaPolicy());
}

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaListHistoryItem() {
    return z.array(zodSchemaHistoryItem());
}

export function zodSchema__Empty() {
    return z.string().max(0).optional();
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/simple-openapi.json execute accepts urls 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { ValidatedResponse } from 'openapi2typescript';
import { Action } from 'react-fetching-library';
import {
    actionBuilder,
    ActionValidatableConfig
} from 'openapi2typescript/react-fetching-library';

export const Fruit = zodSchemaFruit();
export type Fruit = z.infer<typeof Fruit>;

export const Message = zodSchemaMessage();
export type Message = z.infer<typeof Message>;

export const SetFruit = zodSchemaSetFruit();
export type SetFruit = z.infer<typeof SetFruit>;

// GET /fruits
export type GetFruitsPayload =
  | ValidatedResponse<'SetFruit', 200, SetFruit>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetFruits = Action<GetFruitsPayload, ActionValidatableConfig>;
export const actionGetFruits = (): ActionGetFruits => {
    const path = '/fruits';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: SetFruit, type: 'SetFruit' }]
    })
    .build();
};

// POST /fruits
export interface PostFruits {
  body: Fruit;
}

export type PostFruitsPayload =
  | ValidatedResponse<'SetFruit', 200, SetFruit>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostFruits = Action<
  PostFruitsPayload,
  ActionValidatableConfig
>;
export const actionPostFruits = (params: PostFruits): ActionPostFruits => {
    const path = '/fruits';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: SetFruit, type: 'SetFruit' }]
    })
    .build();
};

// DELETE /fruits
export interface DeleteFruits {
  body: Fruit;
}

export type DeleteFruitsPayload =
  | ValidatedResponse<'SetFruit', 200, SetFruit>
  | ValidatedResponse<'Message', 400, Message>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeleteFruits = Action<
  DeleteFruitsPayload,
  ActionValidatableConfig
>;
export const actionDeleteFruits = (
    params: DeleteFruits
): ActionDeleteFruits => {
    const path = '/fruits';
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: SetFruit, type: 'SetFruit' },
            { status: 400, zod: Message, type: 'Message' }
        ]
    })
    .build();
};

export function zodSchemaFruit() {
    return z.object({
        description: z.string().optional().nullable(),
        name: z.string().optional().nullable()
    });
}

export function zodSchemaMessage() {
    return z.object({
        description: z.string().optional().nullable()
    });
}

export function zodSchemaSetFruit() {
    return z.array(zodSchemaFruit());
}
"
`;

exports[`src/cli/schema execute for ./tests/__fixtures__/simple-openapi.json execute input file accepts path 1`] = `
"/* eslint-disable */
/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import { actionBuilder } from 'openapi2typescript/react-fetching-library';

export const Fruit = zodSchemaFruit();

export const Message = zodSchemaMessage();

export const SetFruit = zodSchemaSetFruit();

// GET /fruits
export const actionGetFruits = () => {
    const path = '/fruits';
    const query = {};
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: SetFruit, type: 'SetFruit' }]
    })
    .build();
};

// POST /fruits
/*
 Params
body: Fruit
*/
export const actionPostFruits = (params) => {
    const path = '/fruits';
    const query = {};
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: SetFruit, type: 'SetFruit' }]
    })
    .build();
};

// DELETE /fruits
/*
 Params
body: Fruit
*/
export const actionDeleteFruits = (params) => {
    const path = '/fruits';
    const query = {};
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: SetFruit, type: 'SetFruit' },
            { status: 400, zod: Message, type: 'Message' }
        ]
    })
    .build();
};

export function zodSchemaFruit() {
    return z.object({
        description: z.string().optional().nullable(),
        name: z.string().optional().nullable()
    });
}

export function zodSchemaMessage() {
    return z.object({
        description: z.string().optional().nullable()
    });
}

export function zodSchemaSetFruit() {
    return z.array(zodSchemaFruit());
}
"
`;
