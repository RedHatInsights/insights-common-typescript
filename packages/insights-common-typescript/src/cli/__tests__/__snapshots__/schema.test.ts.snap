// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src/cli/schema for ./src/cli/__tests__/notifications-openapi.json execute accepts urls 1`] = `
"/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import {
    actionBuilder,
    ValidatedResponse,
    ActionValidatable
} from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
/* eslint-disable @typescript-eslint/no-use-before-define */

export const Attributes = zodSchemaAttributes();
export type Attributes = z.infer<typeof Attributes>;

export const Date = zodSchemaDate();
export type Date = z.infer<typeof Date>;

export const EmailAttributes = zodSchemaEmailAttributes();
export type EmailAttributes = z.infer<typeof EmailAttributes>;

export const Endpoint = zodSchemaEndpoint();
export type Endpoint = z.infer<typeof Endpoint>;

export const EndpointType = zodSchemaEndpointType();
export type EndpointType = z.infer<typeof EndpointType>;

export const HttpType = zodSchemaHttpType();
export type HttpType = z.infer<typeof HttpType>;

export const JsonObject = zodSchemaJsonObject();
export type JsonObject = z.infer<typeof JsonObject>;

export const NotificationHistory = zodSchemaNotificationHistory();
export type NotificationHistory = z.infer<typeof NotificationHistory>;

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export const WebhookAttributes = zodSchemaWebhookAttributes();
export type WebhookAttributes = z.infer<typeof WebhookAttributes>;

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z.union([
            zodSchemaWebhookAttributes(),
            zodSchemaEmailAttributes()
        ]),
        type: z.intersection(zodSchemaEndpointType(), z.enum([ 'webhook', 'email' ])),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email' ]);
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST' ]);
}

export function zodSchemaJsonObject() {
    return z.array(z.any());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

// get /api/notifications/v1.0/endpoints
const GetApiNotificationsV10EndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
type GetApiNotificationsV10EndpointsParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsParamResponse200
>;
export type GetApiNotificationsV10EndpointsPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsParamResponse200',
      200,
      GetApiNotificationsV10EndpointsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10Endpoints = Action<
  GetApiNotificationsV10EndpointsPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10Endpoints = (): ActionGetApiNotificationsV10Endpoints => {
    const path = '/api/notifications/v1.0/endpoints';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsParamResponse200,
                type: 'GetApiNotificationsV10EndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// post /api/notifications/v1.0/endpoints
export interface PostApiNotificationsV10Endpoints {
  body?: Endpoint;
}

export type PostApiNotificationsV10EndpointsPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostApiNotificationsV10Endpoints = Action<
  PostApiNotificationsV10EndpointsPayload,
  ActionValidatable
>;
export const actionPostApiNotificationsV10Endpoints = (
    params: PostApiNotificationsV10Endpoints
): ActionPostApiNotificationsV10Endpoints => {
    const path = '/api/notifications/v1.0/endpoints';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}
export interface GetApiNotificationsV10EndpointsId {
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsId = Action<
  GetApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsId = (
    params: GetApiNotificationsV10EndpointsId
): ActionGetApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// put /api/notifications/v1.0/endpoints/{id}
const PutApiNotificationsV10EndpointsIdParamResponse200 = z.string();
type PutApiNotificationsV10EndpointsIdParamResponse200 = z.infer<
  typeof PutApiNotificationsV10EndpointsIdParamResponse200
>;
export interface PutApiNotificationsV10EndpointsId {
  id: UUID;
  body?: Endpoint;
}

export type PutApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<
      'PutApiNotificationsV10EndpointsIdParamResponse200',
      200,
      PutApiNotificationsV10EndpointsIdParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutApiNotificationsV10EndpointsId = Action<
  PutApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionPutApiNotificationsV10EndpointsId = (
    params: PutApiNotificationsV10EndpointsId
): ActionPutApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: PutApiNotificationsV10EndpointsIdParamResponse200,
                type: 'PutApiNotificationsV10EndpointsIdParamResponse200'
            }
        ]
    })
    .build();
};

// delete /api/notifications/v1.0/endpoints/{id}
const DeleteApiNotificationsV10EndpointsIdParamResponse200 = z.string();
type DeleteApiNotificationsV10EndpointsIdParamResponse200 = z.infer<
  typeof DeleteApiNotificationsV10EndpointsIdParamResponse200
>;
export interface DeleteApiNotificationsV10EndpointsId {
  id: UUID;
}

export type DeleteApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<
      'DeleteApiNotificationsV10EndpointsIdParamResponse200',
      200,
      DeleteApiNotificationsV10EndpointsIdParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeleteApiNotificationsV10EndpointsId = Action<
  DeleteApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionDeleteApiNotificationsV10EndpointsId = (
    params: DeleteApiNotificationsV10EndpointsId
): ActionDeleteApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: DeleteApiNotificationsV10EndpointsIdParamResponse200,
                type: 'DeleteApiNotificationsV10EndpointsIdParamResponse200'
            }
        ]
    })
    .build();
};

// put /api/notifications/v1.0/endpoints/{id}/enable
const PutApiNotificationsV10EndpointsIdEnableParamResponse200 = z.string();
type PutApiNotificationsV10EndpointsIdEnableParamResponse200 = z.infer<
  typeof PutApiNotificationsV10EndpointsIdEnableParamResponse200
>;
export interface PutApiNotificationsV10EndpointsIdEnable {
  id: UUID;
}

export type PutApiNotificationsV10EndpointsIdEnablePayload =
  | ValidatedResponse<
      'PutApiNotificationsV10EndpointsIdEnableParamResponse200',
      200,
      PutApiNotificationsV10EndpointsIdEnableParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutApiNotificationsV10EndpointsIdEnable = Action<
  PutApiNotificationsV10EndpointsIdEnablePayload,
  ActionValidatable
>;
export const actionPutApiNotificationsV10EndpointsIdEnable = (
    params: PutApiNotificationsV10EndpointsIdEnable
): ActionPutApiNotificationsV10EndpointsIdEnable => {
    const path = '/api/notifications/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PutApiNotificationsV10EndpointsIdEnableParamResponse200,
                type: 'PutApiNotificationsV10EndpointsIdEnableParamResponse200'
            }
        ]
    })
    .build();
};

// delete /api/notifications/v1.0/endpoints/{id}/enable
const DeleteApiNotificationsV10EndpointsIdEnableParamResponse200 = z.string();
type DeleteApiNotificationsV10EndpointsIdEnableParamResponse200 = z.infer<
  typeof DeleteApiNotificationsV10EndpointsIdEnableParamResponse200
>;
export interface DeleteApiNotificationsV10EndpointsIdEnable {
  id: UUID;
}

export type DeleteApiNotificationsV10EndpointsIdEnablePayload =
  | ValidatedResponse<
      'DeleteApiNotificationsV10EndpointsIdEnableParamResponse200',
      200,
      DeleteApiNotificationsV10EndpointsIdEnableParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeleteApiNotificationsV10EndpointsIdEnable = Action<
  DeleteApiNotificationsV10EndpointsIdEnablePayload,
  ActionValidatable
>;
export const actionDeleteApiNotificationsV10EndpointsIdEnable = (
    params: DeleteApiNotificationsV10EndpointsIdEnable
): ActionDeleteApiNotificationsV10EndpointsIdEnable => {
    const path = '/api/notifications/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: DeleteApiNotificationsV10EndpointsIdEnableParamResponse200,
                type: 'DeleteApiNotificationsV10EndpointsIdEnableParamResponse200'
            }
        ]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}/history
const GetApiNotificationsV10EndpointsIdHistoryParamResponse200 = z.array(
    zodSchemaNotificationHistory()
);
type GetApiNotificationsV10EndpointsIdHistoryParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryParamResponse200
>;
export interface GetApiNotificationsV10EndpointsIdHistory {
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdHistoryPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsIdHistoryParamResponse200',
      200,
      GetApiNotificationsV10EndpointsIdHistoryParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsIdHistory = Action<
  GetApiNotificationsV10EndpointsIdHistoryPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsIdHistory = (
    params: GetApiNotificationsV10EndpointsIdHistory
): ActionGetApiNotificationsV10EndpointsIdHistory => {
    const path = '/api/notifications/v1.0/endpoints/{id}/history'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsIdHistoryParamResponse200,
                type: 'GetApiNotificationsV10EndpointsIdHistoryParamResponse200'
            }
        ]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}/history/{history_id}/details
const GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId = z
.number()
.int();
type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId
>;
const GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200 = z.string();
type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200
>;
export interface GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails {
  historyId: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId;
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200',
      200,
      GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails = Action<
  GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails = (
    params: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails
): ActionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails => {
    const path = '/api/notifications/v1.0/endpoints/{id}/history/{history_id}/details'
    .replace('{history_id}', params.historyId.toString())
    .replace('{id}', params.id.toString());
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200,
                type:
            'GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200'
            }
        ]
    })
    .build();
};
"
`;

exports[`src/cli/schema for ./src/cli/__tests__/notifications-openapi.json execute input file accepts path 1`] = `
"/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import {
    actionBuilder,
    ValidatedResponse,
    ActionValidatable
} from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
/* eslint-disable @typescript-eslint/no-use-before-define */

export const Attributes = zodSchemaAttributes();
export type Attributes = z.infer<typeof Attributes>;

export const Date = zodSchemaDate();
export type Date = z.infer<typeof Date>;

export const EmailAttributes = zodSchemaEmailAttributes();
export type EmailAttributes = z.infer<typeof EmailAttributes>;

export const Endpoint = zodSchemaEndpoint();
export type Endpoint = z.infer<typeof Endpoint>;

export const EndpointType = zodSchemaEndpointType();
export type EndpointType = z.infer<typeof EndpointType>;

export const HttpType = zodSchemaHttpType();
export type HttpType = z.infer<typeof HttpType>;

export const JsonObject = zodSchemaJsonObject();
export type JsonObject = z.infer<typeof JsonObject>;

export const NotificationHistory = zodSchemaNotificationHistory();
export type NotificationHistory = z.infer<typeof NotificationHistory>;

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export const WebhookAttributes = zodSchemaWebhookAttributes();
export type WebhookAttributes = z.infer<typeof WebhookAttributes>;

export function zodSchemaAttributes() {
    return z.unknown();
}

export function zodSchemaDate() {
    return z.string();
}

export function zodSchemaEmailAttributes() {
    return z.unknown();
}

export function zodSchemaEndpoint() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        description: z.string(),
        enabled: z.boolean().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        name: z.string(),
        properties: z.union([
            zodSchemaWebhookAttributes(),
            zodSchemaEmailAttributes()
        ]),
        type: z.intersection(zodSchemaEndpointType(), z.enum([ 'webhook', 'email' ])),
        updated: zodSchemaDate().optional().nullable()
    });
}

export function zodSchemaEndpointType() {
    return z.enum([ 'webhook', 'email' ]);
}

export function zodSchemaHttpType() {
    return z.enum([ 'GET', 'POST' ]);
}

export function zodSchemaJsonObject() {
    return z.array(z.any());
}

export function zodSchemaNotificationHistory() {
    return z.object({
        created: zodSchemaDate().optional().nullable(),
        details: zodSchemaJsonObject().optional().nullable(),
        endpointId: zodSchemaUUID().optional().nullable(),
        id: z.number().int().optional().nullable(),
        invocationResult: z.boolean().optional().nullable(),
        invocationTime: z.number().int().optional().nullable()
    });
}

export function zodSchemaUUID() {
    return z.string();
}

export function zodSchemaWebhookAttributes() {
    return z.object({
        disable_ssl_verification: z.boolean().optional().nullable(),
        method: z.intersection(zodSchemaHttpType(), z.enum([ 'GET', 'POST' ])),
        secret_token: z.string().optional().nullable(),
        url: z.string()
    });
}

// get /api/notifications/v1.0/endpoints
const GetApiNotificationsV10EndpointsParamResponse200 = z.array(
    zodSchemaEndpoint()
);
type GetApiNotificationsV10EndpointsParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsParamResponse200
>;
export type GetApiNotificationsV10EndpointsPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsParamResponse200',
      200,
      GetApiNotificationsV10EndpointsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10Endpoints = Action<
  GetApiNotificationsV10EndpointsPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10Endpoints = (): ActionGetApiNotificationsV10Endpoints => {
    const path = '/api/notifications/v1.0/endpoints';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsParamResponse200,
                type: 'GetApiNotificationsV10EndpointsParamResponse200'
            }
        ]
    })
    .build();
};

// post /api/notifications/v1.0/endpoints
export interface PostApiNotificationsV10Endpoints {
  body?: Endpoint;
}

export type PostApiNotificationsV10EndpointsPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostApiNotificationsV10Endpoints = Action<
  PostApiNotificationsV10EndpointsPayload,
  ActionValidatable
>;
export const actionPostApiNotificationsV10Endpoints = (
    params: PostApiNotificationsV10Endpoints
): ActionPostApiNotificationsV10Endpoints => {
    const path = '/api/notifications/v1.0/endpoints';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}
export interface GetApiNotificationsV10EndpointsId {
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<'Endpoint', 200, Endpoint>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsId = Action<
  GetApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsId = (
    params: GetApiNotificationsV10EndpointsId
): ActionGetApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: Endpoint, type: 'Endpoint' }]
    })
    .build();
};

// put /api/notifications/v1.0/endpoints/{id}
const PutApiNotificationsV10EndpointsIdParamResponse200 = z.string();
type PutApiNotificationsV10EndpointsIdParamResponse200 = z.infer<
  typeof PutApiNotificationsV10EndpointsIdParamResponse200
>;
export interface PutApiNotificationsV10EndpointsId {
  id: UUID;
  body?: Endpoint;
}

export type PutApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<
      'PutApiNotificationsV10EndpointsIdParamResponse200',
      200,
      PutApiNotificationsV10EndpointsIdParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutApiNotificationsV10EndpointsId = Action<
  PutApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionPutApiNotificationsV10EndpointsId = (
    params: PutApiNotificationsV10EndpointsId
): ActionPutApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: PutApiNotificationsV10EndpointsIdParamResponse200,
                type: 'PutApiNotificationsV10EndpointsIdParamResponse200'
            }
        ]
    })
    .build();
};

// delete /api/notifications/v1.0/endpoints/{id}
const DeleteApiNotificationsV10EndpointsIdParamResponse200 = z.string();
type DeleteApiNotificationsV10EndpointsIdParamResponse200 = z.infer<
  typeof DeleteApiNotificationsV10EndpointsIdParamResponse200
>;
export interface DeleteApiNotificationsV10EndpointsId {
  id: UUID;
}

export type DeleteApiNotificationsV10EndpointsIdPayload =
  | ValidatedResponse<
      'DeleteApiNotificationsV10EndpointsIdParamResponse200',
      200,
      DeleteApiNotificationsV10EndpointsIdParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeleteApiNotificationsV10EndpointsId = Action<
  DeleteApiNotificationsV10EndpointsIdPayload,
  ActionValidatable
>;
export const actionDeleteApiNotificationsV10EndpointsId = (
    params: DeleteApiNotificationsV10EndpointsId
): ActionDeleteApiNotificationsV10EndpointsId => {
    const path = '/api/notifications/v1.0/endpoints/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: DeleteApiNotificationsV10EndpointsIdParamResponse200,
                type: 'DeleteApiNotificationsV10EndpointsIdParamResponse200'
            }
        ]
    })
    .build();
};

// put /api/notifications/v1.0/endpoints/{id}/enable
const PutApiNotificationsV10EndpointsIdEnableParamResponse200 = z.string();
type PutApiNotificationsV10EndpointsIdEnableParamResponse200 = z.infer<
  typeof PutApiNotificationsV10EndpointsIdEnableParamResponse200
>;
export interface PutApiNotificationsV10EndpointsIdEnable {
  id: UUID;
}

export type PutApiNotificationsV10EndpointsIdEnablePayload =
  | ValidatedResponse<
      'PutApiNotificationsV10EndpointsIdEnableParamResponse200',
      200,
      PutApiNotificationsV10EndpointsIdEnableParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutApiNotificationsV10EndpointsIdEnable = Action<
  PutApiNotificationsV10EndpointsIdEnablePayload,
  ActionValidatable
>;
export const actionPutApiNotificationsV10EndpointsIdEnable = (
    params: PutApiNotificationsV10EndpointsIdEnable
): ActionPutApiNotificationsV10EndpointsIdEnable => {
    const path = '/api/notifications/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('PUT', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PutApiNotificationsV10EndpointsIdEnableParamResponse200,
                type: 'PutApiNotificationsV10EndpointsIdEnableParamResponse200'
            }
        ]
    })
    .build();
};

// delete /api/notifications/v1.0/endpoints/{id}/enable
const DeleteApiNotificationsV10EndpointsIdEnableParamResponse200 = z.string();
type DeleteApiNotificationsV10EndpointsIdEnableParamResponse200 = z.infer<
  typeof DeleteApiNotificationsV10EndpointsIdEnableParamResponse200
>;
export interface DeleteApiNotificationsV10EndpointsIdEnable {
  id: UUID;
}

export type DeleteApiNotificationsV10EndpointsIdEnablePayload =
  | ValidatedResponse<
      'DeleteApiNotificationsV10EndpointsIdEnableParamResponse200',
      200,
      DeleteApiNotificationsV10EndpointsIdEnableParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeleteApiNotificationsV10EndpointsIdEnable = Action<
  DeleteApiNotificationsV10EndpointsIdEnablePayload,
  ActionValidatable
>;
export const actionDeleteApiNotificationsV10EndpointsIdEnable = (
    params: DeleteApiNotificationsV10EndpointsIdEnable
): ActionDeleteApiNotificationsV10EndpointsIdEnable => {
    const path = '/api/notifications/v1.0/endpoints/{id}/enable'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: DeleteApiNotificationsV10EndpointsIdEnableParamResponse200,
                type: 'DeleteApiNotificationsV10EndpointsIdEnableParamResponse200'
            }
        ]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}/history
const GetApiNotificationsV10EndpointsIdHistoryParamResponse200 = z.array(
    zodSchemaNotificationHistory()
);
type GetApiNotificationsV10EndpointsIdHistoryParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryParamResponse200
>;
export interface GetApiNotificationsV10EndpointsIdHistory {
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdHistoryPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsIdHistoryParamResponse200',
      200,
      GetApiNotificationsV10EndpointsIdHistoryParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsIdHistory = Action<
  GetApiNotificationsV10EndpointsIdHistoryPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsIdHistory = (
    params: GetApiNotificationsV10EndpointsIdHistory
): ActionGetApiNotificationsV10EndpointsIdHistory => {
    const path = '/api/notifications/v1.0/endpoints/{id}/history'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsIdHistoryParamResponse200,
                type: 'GetApiNotificationsV10EndpointsIdHistoryParamResponse200'
            }
        ]
    })
    .build();
};

// get /api/notifications/v1.0/endpoints/{id}/history/{history_id}/details
const GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId = z
.number()
.int();
type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId
>;
const GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200 = z.string();
type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200 = z.infer<
  typeof GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200
>;
export interface GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails {
  historyId: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamHistoryId;
  id: UUID;
}

export type GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsPayload =
  | ValidatedResponse<
      'GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200',
      200,
      GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails = Action<
  GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsPayload,
  ActionValidatable
>;
export const actionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails = (
    params: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails
): ActionGetApiNotificationsV10EndpointsIdHistoryHistoryIdDetails => {
    const path = '/api/notifications/v1.0/endpoints/{id}/history/{history_id}/details'
    .replace('{history_id}', params.historyId.toString())
    .replace('{id}', params.id.toString());
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200,
                type:
            'GetApiNotificationsV10EndpointsIdHistoryHistoryIdDetailsParamResponse200'
            }
        ]
    })
    .build();
};
"
`;

exports[`src/cli/schema for ./src/cli/__tests__/policies-openapi.json execute accepts urls 1`] = `
"/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import {
    actionBuilder,
    ValidatedResponse,
    ActionValidatable
} from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
/* eslint-disable @typescript-eslint/no-use-before-define */

export const Fact = zodSchemaFact();
export type Fact = z.infer<typeof Fact>;

export const FactType = zodSchemaFactType();
export type FactType = z.infer<typeof FactType>;

export const HistoryItem = zodSchemaHistoryItem();
export type HistoryItem = z.infer<typeof HistoryItem>;

export const List = zodSchemaList();
export type List = z.infer<typeof List>;

export const ListHistoryItem = zodSchemaListHistoryItem();
export type ListHistoryItem = z.infer<typeof ListHistoryItem>;

export const ListPolicy = zodSchemaListPolicy();
export type ListPolicy = z.infer<typeof ListPolicy>;

export const ListUUID = zodSchemaListUUID();
export type ListUUID = z.infer<typeof ListUUID>;

export const MapStringString = zodSchemaMapStringString();
export type MapStringString = z.infer<typeof MapStringString>;

export const Meta = zodSchemaMeta();
export type Meta = z.infer<typeof Meta>;

export const PagedResponseOfHistoryItem = zodSchemaPagedResponseOfHistoryItem();
export type PagedResponseOfHistoryItem = z.infer<
  typeof PagedResponseOfHistoryItem
>;

export const PagedResponseOfPolicy = zodSchemaPagedResponseOfPolicy();
export type PagedResponseOfPolicy = z.infer<typeof PagedResponseOfPolicy>;

export const Policy = zodSchemaPolicy();
export type Policy = z.infer<typeof Policy>;

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export function zodSchemaFact() {
    return z.object({
        id: z.number().int().optional().nullable(),
        name: z.string().optional().nullable(),
        type: zodSchemaFactType().optional().nullable()
    });
}

export function zodSchemaFactType() {
    return z.enum([ 'BOOLEAN', 'INT', 'LIST', 'STRING' ]);
}

export function zodSchemaHistoryItem() {
    return z.object({
        ctime: z.number().int().optional().nullable(),
        hostName: z.string().optional().nullable(),
        id: z.string().optional().nullable()
    });
}

export function zodSchemaList() {
    return z.array(z.any());
}

export function zodSchemaListHistoryItem() {
    return z.array(zodSchemaHistoryItem());
}

export function zodSchemaListPolicy() {
    return z.array(zodSchemaPolicy());
}

export function zodSchemaListUUID() {
    return z.array(z.string());
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaMeta() {
    return z.object({
        count: z.number().int().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfHistoryItem() {
    return z.object({
        data: zodSchemaListHistoryItem().optional().nullable(),
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfPolicy() {
    return z.object({
        data: zodSchemaListPolicy().optional().nullable(),
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable()
    });
}

export function zodSchemaPolicy() {
    return z.object({
        actions: z.string().optional().nullable(),
        conditions: z.string(),
        ctime: z.string().optional().nullable(),
        description: z.string().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        isEnabled: z.boolean().optional().nullable(),
        lastTriggered: z.number().int().optional().nullable(),
        mtime: z.string().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaUUID() {
    return z.string();
}

// get /
const __Empty = z.string().max(0).optional();
type __Empty = z.infer<typeof __Empty>;
export type GetPayload =
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGet = Action<GetPayload, ActionValidatable>;

/** Just a filler to have a defined return code for the base path */
export const actionGet = (): ActionGet => {
    const path = '/api/policies/v1.0/';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 404, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// get /facts
const GetFactsParamResponse200 = z.array(zodSchemaFact());
type GetFactsParamResponse200 = z.infer<typeof GetFactsParamResponse200>;
export type GetFactsPayload =
  | ValidatedResponse<'GetFactsParamResponse200', 200, GetFactsParamResponse200>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetFacts = Action<GetFactsPayload, ActionValidatable>;

/** Retrieve a list of fact (keys) along with their data types */
export const actionGetFacts = (): ActionGetFacts => {
    const path = '/api/policies/v1.0/facts';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetFactsParamResponse200,
                type: 'GetFactsParamResponse200'
            }
        ]
    })
    .build();
};

// get /policies
const GetPoliciesParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpDescription = z.infer<
  typeof GetPoliciesParamFilterOpDescription
>;
const GetPoliciesParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpName = z.infer<
  typeof GetPoliciesParamFilterOpName
>;
const GetPoliciesParamFilterDescription = z.string();
type GetPoliciesParamFilterDescription = z.infer<
  typeof GetPoliciesParamFilterDescription
>;
const GetPoliciesParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesParamFilterIsEnabled = z.infer<
  typeof GetPoliciesParamFilterIsEnabled
>;
const GetPoliciesParamFilterName = z.string();
type GetPoliciesParamFilterName = z.infer<typeof GetPoliciesParamFilterName>;
const GetPoliciesParamLimit = z.number().int();
type GetPoliciesParamLimit = z.infer<typeof GetPoliciesParamLimit>;
const GetPoliciesParamOffset = z.number().int();
type GetPoliciesParamOffset = z.infer<typeof GetPoliciesParamOffset>;
const GetPoliciesParamSortColumn = z.enum([
    'name',
    'description',
    'is_enabled',
    'mtime'
]);
type GetPoliciesParamSortColumn = z.infer<typeof GetPoliciesParamSortColumn>;
const GetPoliciesParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesParamSortDirection = z.infer<
  typeof GetPoliciesParamSortDirection
>;
export interface GetPolicies {
  filterOpDescription?: GetPoliciesParamFilterOpDescription;
  filterOpName?: GetPoliciesParamFilterOpName;
  filterDescription?: GetPoliciesParamFilterDescription;
  filterIsEnabled?: GetPoliciesParamFilterIsEnabled;
  filterName?: GetPoliciesParamFilterName;
  limit?: GetPoliciesParamLimit;
  offset?: GetPoliciesParamOffset;
  sortColumn?: GetPoliciesParamSortColumn;
  sortDirection?: GetPoliciesParamSortDirection;
}

export type GetPoliciesPayload =
  | ValidatedResponse<'PagedResponseOfPolicy', 200, PagedResponseOfPolicy>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPolicies = Action<GetPoliciesPayload, ActionValidatable>;

/** Return all policies for a given account */
export const actionGetPolicies = (params: GetPolicies): ActionGetPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit) {
        query.limit = params.limit.toString();
    }

    if (params.offset) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfPolicy,
                type: 'PagedResponseOfPolicy'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies
const PostPoliciesParamAlsoStore = z.boolean();
type PostPoliciesParamAlsoStore = z.infer<typeof PostPoliciesParamAlsoStore>;
const PostPoliciesParamResponse400 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse400 = z.infer<
  typeof PostPoliciesParamResponse400
>;
const PostPoliciesParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse409 = z.infer<
  typeof PostPoliciesParamResponse409
>;
export interface PostPolicies {
  alsoStore?: PostPoliciesParamAlsoStore;
  body?: Policy;
}

export type PostPoliciesPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'Policy', 201, Policy>
  | ValidatedResponse<
      'PostPoliciesParamResponse400',
      400,
      PostPoliciesParamResponse400
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<
      'PostPoliciesParamResponse409',
      409,
      PostPoliciesParamResponse409
    >
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPolicies = Action<PostPoliciesPayload, ActionValidatable>;

/** Validate (and possibly persist) a passed policy for the given account */
export const actionPostPolicies = (
    params: PostPolicies
): ActionPostPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.alsoStore) {
        query.alsoStore = params.alsoStore.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 201, zod: Policy, type: 'Policy' },
            {
                status: 400,
                zod: PostPoliciesParamResponse400,
                type: 'PostPoliciesParamResponse400'
            },
            { status: 403, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PostPoliciesParamResponse409,
                type: 'PostPoliciesParamResponse409'
            },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/ids
const GetPoliciesIdsParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpDescription = z.infer<
  typeof GetPoliciesIdsParamFilterOpDescription
>;
const GetPoliciesIdsParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpName = z.infer<
  typeof GetPoliciesIdsParamFilterOpName
>;
const GetPoliciesIdsParamFilterDescription = z.string();
type GetPoliciesIdsParamFilterDescription = z.infer<
  typeof GetPoliciesIdsParamFilterDescription
>;
const GetPoliciesIdsParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesIdsParamFilterIsEnabled = z.infer<
  typeof GetPoliciesIdsParamFilterIsEnabled
>;
const GetPoliciesIdsParamFilterName = z.string();
type GetPoliciesIdsParamFilterName = z.infer<
  typeof GetPoliciesIdsParamFilterName
>;
export interface GetPoliciesIds {
  filterOpDescription?: GetPoliciesIdsParamFilterOpDescription;
  filterOpName?: GetPoliciesIdsParamFilterOpName;
  filterDescription?: GetPoliciesIdsParamFilterDescription;
  filterIsEnabled?: GetPoliciesIdsParamFilterIsEnabled;
  filterName?: GetPoliciesIdsParamFilterName;
}

export type GetPoliciesIdsPayload =
  | ValidatedResponse<'List', 200, List>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesIds = Action<
  GetPoliciesIdsPayload,
  ActionValidatable
>;

/** Return all policy ids for a given account after applying the filters */
export const actionGetPoliciesIds = (
    params: GetPoliciesIds
): ActionGetPoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: List, type: 'List' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// delete /policies/ids
const DeletePoliciesIdsParamResponse200 = z.array(zodSchemaUUID());
type DeletePoliciesIdsParamResponse200 = z.infer<
  typeof DeletePoliciesIdsParamResponse200
>;
export interface DeletePoliciesIds {
  body?: ListUUID;
}

export type DeletePoliciesIdsPayload =
  | ValidatedResponse<
      'DeletePoliciesIdsParamResponse200',
      200,
      DeletePoliciesIdsParamResponse200
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesIds = Action<
  DeletePoliciesIdsPayload,
  ActionValidatable
>;

/** Delete policies for a customer by the ids passed in the body. Result will be a list of deleted UUIDs */
export const actionDeletePoliciesIds = (
    params: DeletePoliciesIds
): ActionDeletePoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: DeletePoliciesIdsParamResponse200,
                type: 'DeletePoliciesIdsParamResponse200'
            },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/ids/enabled
const PostPoliciesIdsEnabledParamEnabled = z.boolean();
type PostPoliciesIdsEnabledParamEnabled = z.infer<
  typeof PostPoliciesIdsEnabledParamEnabled
>;
export interface PostPoliciesIdsEnabled {
  enabled?: PostPoliciesIdsEnabledParamEnabled;
  body?: ListUUID;
}

export type PostPoliciesIdsEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesIdsEnabled = Action<
  PostPoliciesIdsEnabledPayload,
  ActionValidatable
>;

/** Enable/disable policies identified by list of uuid in body */
export const actionPostPoliciesIdsEnabled = (
    params: PostPoliciesIdsEnabled
): ActionPostPoliciesIdsEnabled => {
    const path = '/api/policies/v1.0/policies/ids/enabled';
    const query = {} as Record<string, any>;
    if (params.enabled) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/validate
export interface PostPoliciesValidate {
  body?: Policy;
}

export type PostPoliciesValidatePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidate = Action<
  PostPoliciesValidatePayload,
  ActionValidatable
>;

/** Validates a Policy condition */
export const actionPostPoliciesValidate = (
    params: PostPoliciesValidate
): ActionPostPoliciesValidate => {
    const path = '/api/policies/v1.0/policies/validate';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/validate-name
const PostPoliciesValidateNameParamBody = z.string();
type PostPoliciesValidateNameParamBody = z.infer<
  typeof PostPoliciesValidateNameParamBody
>;
export interface PostPoliciesValidateName {
  id?: UUID;
  body?: PostPoliciesValidateNameParamBody;
}

export type PostPoliciesValidateNamePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 409, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidateName = Action<
  PostPoliciesValidateNamePayload,
  ActionValidatable
>;

/** Validates the Policy.name and verifies if it is unique. */
export const actionPostPoliciesValidateName = (
    params: PostPoliciesValidateName
): ActionPostPoliciesValidateName => {
    const path = '/api/policies/v1.0/policies/validate-name';
    const query = {} as Record<string, any>;
    if (params.id) {
        query.id = params.id.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 409, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/{id}
export interface GetPoliciesById {
  id: UUID;
}

export type GetPoliciesIdPayload =
  | ValidatedResponse<'Policy', 200, Policy>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesId = Action<
  GetPoliciesIdPayload,
  ActionValidatable
>;

/** Retrieve a single policy for a customer by its id */
export const actionGetPoliciesById = (
    params: GetPoliciesById
): ActionGetPoliciesId => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: Policy, type: 'Policy' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// delete /policies/{id}
export interface DeletePoliciesById {
  id: UUID;
}

export type DeletePoliciesIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesId = Action<
  DeletePoliciesIdPayload,
  ActionValidatable
>;

/** Delete a single policy for a customer by its id */
export const actionDeletePoliciesById = (
    params: DeletePoliciesById
): ActionDeletePoliciesId => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/{id}/enabled
const PostPoliciesByIdEnabledParamEnabled = z.boolean();
type PostPoliciesByIdEnabledParamEnabled = z.infer<
  typeof PostPoliciesByIdEnabledParamEnabled
>;
export interface PostPoliciesByIdEnabled {
  id: UUID;
  enabled?: PostPoliciesByIdEnabledParamEnabled;
}

export type PostPoliciesIdEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesIdEnabled = Action<
  PostPoliciesIdEnabledPayload,
  ActionValidatable
>;

/** Enable/disable a policy */
export const actionPostPoliciesByIdEnabled = (
    params: PostPoliciesByIdEnabled
): ActionPostPoliciesIdEnabled => {
    const path = '/api/policies/v1.0/policies/{id}/enabled'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.enabled) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/{id}/history/trigger
const GetPoliciesByIdHistoryTriggerParamFilterOpId = z.enum([
    'equal',
    'not_equal',
    'like'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpId
>;
const GetPoliciesByIdHistoryTriggerParamFilterOpName = z.enum([
    'equal',
    'like',
    'not_equal'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpName
>;
const GetPoliciesByIdHistoryTriggerParamFilterId = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterId
>;
const GetPoliciesByIdHistoryTriggerParamFilterName = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterName
>;
const GetPoliciesByIdHistoryTriggerParamLimit = z.number().int();
type GetPoliciesByIdHistoryTriggerParamLimit = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamLimit
>;
const GetPoliciesByIdHistoryTriggerParamOffset = z.number().int();
type GetPoliciesByIdHistoryTriggerParamOffset = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamOffset
>;
const GetPoliciesByIdHistoryTriggerParamSortColumn = z.enum([
    'hostName',
    'id',
    'ctime'
]);
type GetPoliciesByIdHistoryTriggerParamSortColumn = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortColumn
>;
const GetPoliciesByIdHistoryTriggerParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesByIdHistoryTriggerParamSortDirection = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortDirection
>;
export interface GetPoliciesByIdHistoryTrigger {
  id: UUID;
  filterOpId?: GetPoliciesByIdHistoryTriggerParamFilterOpId;
  filterOpName?: GetPoliciesByIdHistoryTriggerParamFilterOpName;
  filterId?: GetPoliciesByIdHistoryTriggerParamFilterId;
  filterName?: GetPoliciesByIdHistoryTriggerParamFilterName;
  limit?: GetPoliciesByIdHistoryTriggerParamLimit;
  offset?: GetPoliciesByIdHistoryTriggerParamOffset;
  sortColumn?: GetPoliciesByIdHistoryTriggerParamSortColumn;
  sortDirection?: GetPoliciesByIdHistoryTriggerParamSortDirection;
}

export type GetPoliciesIdHistoryTriggerPayload =
  | ValidatedResponse<
      'PagedResponseOfHistoryItem',
      200,
      PagedResponseOfHistoryItem
    >
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesIdHistoryTrigger = Action<
  GetPoliciesIdHistoryTriggerPayload,
  ActionValidatable
>;

/** Retrieve the trigger history of a single policy */
export const actionGetPoliciesByIdHistoryTrigger = (
    params: GetPoliciesByIdHistoryTrigger
): ActionGetPoliciesIdHistoryTrigger => {
    const path = '/api/policies/v1.0/policies/{id}/history/trigger'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.filterOpId) {
        query['filter:op[id]'] = params.filterOpId.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterId) {
        query['filter[id]'] = params.filterId.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit) {
        query.limit = params.limit.toString();
    }

    if (params.offset) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfHistoryItem,
                type: 'PagedResponseOfHistoryItem'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// put /policies/{policyId}
const PutPoliciesByPolicyIdParamDry = z.boolean();
type PutPoliciesByPolicyIdParamDry = z.infer<
  typeof PutPoliciesByPolicyIdParamDry
>;
const PutPoliciesByPolicyIdParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PutPoliciesByPolicyIdParamResponse409 = z.infer<
  typeof PutPoliciesByPolicyIdParamResponse409
>;
export interface PutPoliciesByPolicyId {
  policyId: UUID;
  dry?: PutPoliciesByPolicyIdParamDry;
  body?: Policy;
}

export type PutPoliciesPolicyIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<
      'PutPoliciesByPolicyIdParamResponse409',
      409,
      PutPoliciesByPolicyIdParamResponse409
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutPoliciesPolicyId = Action<
  PutPoliciesPolicyIdPayload,
  ActionValidatable
>;

/** Update a single policy for a customer by its id */
export const actionPutPoliciesByPolicyId = (
    params: PutPoliciesByPolicyId
): ActionPutPoliciesPolicyId => {
    const path = '/api/policies/v1.0/policies/{policyId}'.replace(
        '{policyId}',
        params.policyId.toString()
    );
    const query = {} as Record<string, any>;
    if (params.dry) {
        query.dry = params.dry.toString();
    }

    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PutPoliciesByPolicyIdParamResponse409,
                type: 'PutPoliciesByPolicyIdParamResponse409'
            }
        ]
    })
    .build();
};

// get /status
export type GetStatusPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetStatus = Action<GetStatusPayload, ActionValidatable>;
export const actionGetStatus = (): ActionGetStatus => {
    const path = '/api/policies/v1.0/status';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: __Empty, type: '__Empty' }]
    })
    .build();
};
"
`;

exports[`src/cli/schema for ./src/cli/__tests__/policies-openapi.json execute input file accepts path 1`] = `
"/**
 * Generated code, DO NOT modify directly.
 */
import * as z from 'zod';
import {
    actionBuilder,
    ValidatedResponse,
    ActionValidatable
} from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
/* eslint-disable @typescript-eslint/no-use-before-define */

export const Fact = zodSchemaFact();
export type Fact = z.infer<typeof Fact>;

export const FactType = zodSchemaFactType();
export type FactType = z.infer<typeof FactType>;

export const HistoryItem = zodSchemaHistoryItem();
export type HistoryItem = z.infer<typeof HistoryItem>;

export const List = zodSchemaList();
export type List = z.infer<typeof List>;

export const ListHistoryItem = zodSchemaListHistoryItem();
export type ListHistoryItem = z.infer<typeof ListHistoryItem>;

export const ListPolicy = zodSchemaListPolicy();
export type ListPolicy = z.infer<typeof ListPolicy>;

export const ListUUID = zodSchemaListUUID();
export type ListUUID = z.infer<typeof ListUUID>;

export const MapStringString = zodSchemaMapStringString();
export type MapStringString = z.infer<typeof MapStringString>;

export const Meta = zodSchemaMeta();
export type Meta = z.infer<typeof Meta>;

export const PagedResponseOfHistoryItem = zodSchemaPagedResponseOfHistoryItem();
export type PagedResponseOfHistoryItem = z.infer<
  typeof PagedResponseOfHistoryItem
>;

export const PagedResponseOfPolicy = zodSchemaPagedResponseOfPolicy();
export type PagedResponseOfPolicy = z.infer<typeof PagedResponseOfPolicy>;

export const Policy = zodSchemaPolicy();
export type Policy = z.infer<typeof Policy>;

export const UUID = zodSchemaUUID();
export type UUID = z.infer<typeof UUID>;

export function zodSchemaFact() {
    return z.object({
        id: z.number().int().optional().nullable(),
        name: z.string().optional().nullable(),
        type: zodSchemaFactType().optional().nullable()
    });
}

export function zodSchemaFactType() {
    return z.enum([ 'BOOLEAN', 'INT', 'LIST', 'STRING' ]);
}

export function zodSchemaHistoryItem() {
    return z.object({
        ctime: z.number().int().optional().nullable(),
        hostName: z.string().optional().nullable(),
        id: z.string().optional().nullable()
    });
}

export function zodSchemaList() {
    return z.array(z.any());
}

export function zodSchemaListHistoryItem() {
    return z.array(zodSchemaHistoryItem());
}

export function zodSchemaListPolicy() {
    return z.array(zodSchemaPolicy());
}

export function zodSchemaListUUID() {
    return z.array(z.string());
}

export function zodSchemaMapStringString() {
    return z.record(z.string());
}

export function zodSchemaMeta() {
    return z.object({
        count: z.number().int().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfHistoryItem() {
    return z.object({
        data: zodSchemaListHistoryItem().optional().nullable(),
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable()
    });
}

export function zodSchemaPagedResponseOfPolicy() {
    return z.object({
        data: zodSchemaListPolicy().optional().nullable(),
        links: zodSchemaMapStringString().optional().nullable(),
        meta: zodSchemaMeta().optional().nullable()
    });
}

export function zodSchemaPolicy() {
    return z.object({
        actions: z.string().optional().nullable(),
        conditions: z.string(),
        ctime: z.string().optional().nullable(),
        description: z.string().optional().nullable(),
        id: zodSchemaUUID().optional().nullable(),
        isEnabled: z.boolean().optional().nullable(),
        lastTriggered: z.number().int().optional().nullable(),
        mtime: z.string().optional().nullable(),
        name: z.string()
    });
}

export function zodSchemaUUID() {
    return z.string();
}

// get /
const __Empty = z.string().max(0).optional();
type __Empty = z.infer<typeof __Empty>;
export type GetPayload =
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGet = Action<GetPayload, ActionValidatable>;

/** Just a filler to have a defined return code for the base path */
export const actionGet = (): ActionGet => {
    const path = '/api/policies/v1.0/';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 404, zod: __Empty, type: '__Empty' }]
    })
    .build();
};

// get /facts
const GetFactsParamResponse200 = z.array(zodSchemaFact());
type GetFactsParamResponse200 = z.infer<typeof GetFactsParamResponse200>;
export type GetFactsPayload =
  | ValidatedResponse<'GetFactsParamResponse200', 200, GetFactsParamResponse200>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetFacts = Action<GetFactsPayload, ActionValidatable>;

/** Retrieve a list of fact (keys) along with their data types */
export const actionGetFacts = (): ActionGetFacts => {
    const path = '/api/policies/v1.0/facts';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: GetFactsParamResponse200,
                type: 'GetFactsParamResponse200'
            }
        ]
    })
    .build();
};

// get /policies
const GetPoliciesParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpDescription = z.infer<
  typeof GetPoliciesParamFilterOpDescription
>;
const GetPoliciesParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesParamFilterOpName = z.infer<
  typeof GetPoliciesParamFilterOpName
>;
const GetPoliciesParamFilterDescription = z.string();
type GetPoliciesParamFilterDescription = z.infer<
  typeof GetPoliciesParamFilterDescription
>;
const GetPoliciesParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesParamFilterIsEnabled = z.infer<
  typeof GetPoliciesParamFilterIsEnabled
>;
const GetPoliciesParamFilterName = z.string();
type GetPoliciesParamFilterName = z.infer<typeof GetPoliciesParamFilterName>;
const GetPoliciesParamLimit = z.number().int();
type GetPoliciesParamLimit = z.infer<typeof GetPoliciesParamLimit>;
const GetPoliciesParamOffset = z.number().int();
type GetPoliciesParamOffset = z.infer<typeof GetPoliciesParamOffset>;
const GetPoliciesParamSortColumn = z.enum([
    'name',
    'description',
    'is_enabled',
    'mtime'
]);
type GetPoliciesParamSortColumn = z.infer<typeof GetPoliciesParamSortColumn>;
const GetPoliciesParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesParamSortDirection = z.infer<
  typeof GetPoliciesParamSortDirection
>;
export interface GetPolicies {
  filterOpDescription?: GetPoliciesParamFilterOpDescription;
  filterOpName?: GetPoliciesParamFilterOpName;
  filterDescription?: GetPoliciesParamFilterDescription;
  filterIsEnabled?: GetPoliciesParamFilterIsEnabled;
  filterName?: GetPoliciesParamFilterName;
  limit?: GetPoliciesParamLimit;
  offset?: GetPoliciesParamOffset;
  sortColumn?: GetPoliciesParamSortColumn;
  sortDirection?: GetPoliciesParamSortDirection;
}

export type GetPoliciesPayload =
  | ValidatedResponse<'PagedResponseOfPolicy', 200, PagedResponseOfPolicy>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPolicies = Action<GetPoliciesPayload, ActionValidatable>;

/** Return all policies for a given account */
export const actionGetPolicies = (params: GetPolicies): ActionGetPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit) {
        query.limit = params.limit.toString();
    }

    if (params.offset) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfPolicy,
                type: 'PagedResponseOfPolicy'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies
const PostPoliciesParamAlsoStore = z.boolean();
type PostPoliciesParamAlsoStore = z.infer<typeof PostPoliciesParamAlsoStore>;
const PostPoliciesParamResponse400 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse400 = z.infer<
  typeof PostPoliciesParamResponse400
>;
const PostPoliciesParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PostPoliciesParamResponse409 = z.infer<
  typeof PostPoliciesParamResponse409
>;
export interface PostPolicies {
  alsoStore?: PostPoliciesParamAlsoStore;
  body?: Policy;
}

export type PostPoliciesPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'Policy', 201, Policy>
  | ValidatedResponse<
      'PostPoliciesParamResponse400',
      400,
      PostPoliciesParamResponse400
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<
      'PostPoliciesParamResponse409',
      409,
      PostPoliciesParamResponse409
    >
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPolicies = Action<PostPoliciesPayload, ActionValidatable>;

/** Validate (and possibly persist) a passed policy for the given account */
export const actionPostPolicies = (
    params: PostPolicies
): ActionPostPolicies => {
    const path = '/api/policies/v1.0/policies';
    const query = {} as Record<string, any>;
    if (params.alsoStore) {
        query.alsoStore = params.alsoStore.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 201, zod: Policy, type: 'Policy' },
            {
                status: 400,
                zod: PostPoliciesParamResponse400,
                type: 'PostPoliciesParamResponse400'
            },
            { status: 403, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PostPoliciesParamResponse409,
                type: 'PostPoliciesParamResponse409'
            },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/ids
const GetPoliciesIdsParamFilterOpDescription = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpDescription = z.infer<
  typeof GetPoliciesIdsParamFilterOpDescription
>;
const GetPoliciesIdsParamFilterOpName = z.enum([
    'equal',
    'like',
    'ilike',
    'not_equal'
]);
type GetPoliciesIdsParamFilterOpName = z.infer<
  typeof GetPoliciesIdsParamFilterOpName
>;
const GetPoliciesIdsParamFilterDescription = z.string();
type GetPoliciesIdsParamFilterDescription = z.infer<
  typeof GetPoliciesIdsParamFilterDescription
>;
const GetPoliciesIdsParamFilterIsEnabled = z.enum([ 'true', 'false' ]);
type GetPoliciesIdsParamFilterIsEnabled = z.infer<
  typeof GetPoliciesIdsParamFilterIsEnabled
>;
const GetPoliciesIdsParamFilterName = z.string();
type GetPoliciesIdsParamFilterName = z.infer<
  typeof GetPoliciesIdsParamFilterName
>;
export interface GetPoliciesIds {
  filterOpDescription?: GetPoliciesIdsParamFilterOpDescription;
  filterOpName?: GetPoliciesIdsParamFilterOpName;
  filterDescription?: GetPoliciesIdsParamFilterDescription;
  filterIsEnabled?: GetPoliciesIdsParamFilterIsEnabled;
  filterName?: GetPoliciesIdsParamFilterName;
}

export type GetPoliciesIdsPayload =
  | ValidatedResponse<'List', 200, List>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesIds = Action<
  GetPoliciesIdsPayload,
  ActionValidatable
>;

/** Return all policy ids for a given account after applying the filters */
export const actionGetPoliciesIds = (
    params: GetPoliciesIds
): ActionGetPoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    if (params.filterOpDescription) {
        query['filter:op[description]'] = params.filterOpDescription.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterDescription) {
        query['filter[description]'] = params.filterDescription.toString();
    }

    if (params.filterIsEnabled) {
        query['filter[is_enabled]'] = params.filterIsEnabled.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: List, type: 'List' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// delete /policies/ids
const DeletePoliciesIdsParamResponse200 = z.array(zodSchemaUUID());
type DeletePoliciesIdsParamResponse200 = z.infer<
  typeof DeletePoliciesIdsParamResponse200
>;
export interface DeletePoliciesIds {
  body?: ListUUID;
}

export type DeletePoliciesIdsPayload =
  | ValidatedResponse<
      'DeletePoliciesIdsParamResponse200',
      200,
      DeletePoliciesIdsParamResponse200
    >
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesIds = Action<
  DeletePoliciesIdsPayload,
  ActionValidatable
>;

/** Delete policies for a customer by the ids passed in the body. Result will be a list of deleted UUIDs */
export const actionDeletePoliciesIds = (
    params: DeletePoliciesIds
): ActionDeletePoliciesIds => {
    const path = '/api/policies/v1.0/policies/ids';
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            {
                status: 200,
                zod: DeletePoliciesIdsParamResponse200,
                type: 'DeletePoliciesIdsParamResponse200'
            },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/ids/enabled
const PostPoliciesIdsEnabledParamEnabled = z.boolean();
type PostPoliciesIdsEnabledParamEnabled = z.infer<
  typeof PostPoliciesIdsEnabledParamEnabled
>;
export interface PostPoliciesIdsEnabled {
  enabled?: PostPoliciesIdsEnabledParamEnabled;
  body?: ListUUID;
}

export type PostPoliciesIdsEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesIdsEnabled = Action<
  PostPoliciesIdsEnabledPayload,
  ActionValidatable
>;

/** Enable/disable policies identified by list of uuid in body */
export const actionPostPoliciesIdsEnabled = (
    params: PostPoliciesIdsEnabled
): ActionPostPoliciesIdsEnabled => {
    const path = '/api/policies/v1.0/policies/ids/enabled';
    const query = {} as Record<string, any>;
    if (params.enabled) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/validate
export interface PostPoliciesValidate {
  body?: Policy;
}

export type PostPoliciesValidatePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidate = Action<
  PostPoliciesValidatePayload,
  ActionValidatable
>;

/** Validates a Policy condition */
export const actionPostPoliciesValidate = (
    params: PostPoliciesValidate
): ActionPostPoliciesValidate => {
    const path = '/api/policies/v1.0/policies/validate';
    const query = {} as Record<string, any>;
    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/validate-name
const PostPoliciesValidateNameParamBody = z.string();
type PostPoliciesValidateNameParamBody = z.infer<
  typeof PostPoliciesValidateNameParamBody
>;
export interface PostPoliciesValidateName {
  id?: UUID;
  body?: PostPoliciesValidateNameParamBody;
}

export type PostPoliciesValidateNamePayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 409, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesValidateName = Action<
  PostPoliciesValidateNamePayload,
  ActionValidatable
>;

/** Validates the Policy.name and verifies if it is unique. */
export const actionPostPoliciesValidateName = (
    params: PostPoliciesValidateName
): ActionPostPoliciesValidateName => {
    const path = '/api/policies/v1.0/policies/validate-name';
    const query = {} as Record<string, any>;
    if (params.id) {
        query.id = params.id.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 409, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/{id}
export interface GetPoliciesById {
  id: UUID;
}

export type GetPoliciesIdPayload =
  | ValidatedResponse<'Policy', 200, Policy>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesId = Action<
  GetPoliciesIdPayload,
  ActionValidatable
>;

/** Retrieve a single policy for a customer by its id */
export const actionGetPoliciesById = (
    params: GetPoliciesById
): ActionGetPoliciesId => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: Policy, type: 'Policy' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// delete /policies/{id}
export interface DeletePoliciesById {
  id: UUID;
}

export type DeletePoliciesIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionDeletePoliciesId = Action<
  DeletePoliciesIdPayload,
  ActionValidatable
>;

/** Delete a single policy for a customer by its id */
export const actionDeletePoliciesById = (
    params: DeletePoliciesById
): ActionDeletePoliciesId => {
    const path = '/api/policies/v1.0/policies/{id}'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    return actionBuilder('DELETE', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// post /policies/{id}/enabled
const PostPoliciesByIdEnabledParamEnabled = z.boolean();
type PostPoliciesByIdEnabledParamEnabled = z.infer<
  typeof PostPoliciesByIdEnabledParamEnabled
>;
export interface PostPoliciesByIdEnabled {
  id: UUID;
  enabled?: PostPoliciesByIdEnabledParamEnabled;
}

export type PostPoliciesIdEnabledPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPostPoliciesIdEnabled = Action<
  PostPoliciesIdEnabledPayload,
  ActionValidatable
>;

/** Enable/disable a policy */
export const actionPostPoliciesByIdEnabled = (
    params: PostPoliciesByIdEnabled
): ActionPostPoliciesIdEnabled => {
    const path = '/api/policies/v1.0/policies/{id}/enabled'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.enabled) {
        query.enabled = params.enabled.toString();
    }

    return actionBuilder('POST', path)
    .queryParams(query)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// get /policies/{id}/history/trigger
const GetPoliciesByIdHistoryTriggerParamFilterOpId = z.enum([
    'equal',
    'not_equal',
    'like'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpId
>;
const GetPoliciesByIdHistoryTriggerParamFilterOpName = z.enum([
    'equal',
    'like',
    'not_equal'
]);
type GetPoliciesByIdHistoryTriggerParamFilterOpName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterOpName
>;
const GetPoliciesByIdHistoryTriggerParamFilterId = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterId = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterId
>;
const GetPoliciesByIdHistoryTriggerParamFilterName = z.string();
type GetPoliciesByIdHistoryTriggerParamFilterName = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamFilterName
>;
const GetPoliciesByIdHistoryTriggerParamLimit = z.number().int();
type GetPoliciesByIdHistoryTriggerParamLimit = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamLimit
>;
const GetPoliciesByIdHistoryTriggerParamOffset = z.number().int();
type GetPoliciesByIdHistoryTriggerParamOffset = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamOffset
>;
const GetPoliciesByIdHistoryTriggerParamSortColumn = z.enum([
    'hostName',
    'id',
    'ctime'
]);
type GetPoliciesByIdHistoryTriggerParamSortColumn = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortColumn
>;
const GetPoliciesByIdHistoryTriggerParamSortDirection = z.enum([ 'asc', 'desc' ]);
type GetPoliciesByIdHistoryTriggerParamSortDirection = z.infer<
  typeof GetPoliciesByIdHistoryTriggerParamSortDirection
>;
export interface GetPoliciesByIdHistoryTrigger {
  id: UUID;
  filterOpId?: GetPoliciesByIdHistoryTriggerParamFilterOpId;
  filterOpName?: GetPoliciesByIdHistoryTriggerParamFilterOpName;
  filterId?: GetPoliciesByIdHistoryTriggerParamFilterId;
  filterName?: GetPoliciesByIdHistoryTriggerParamFilterName;
  limit?: GetPoliciesByIdHistoryTriggerParamLimit;
  offset?: GetPoliciesByIdHistoryTriggerParamOffset;
  sortColumn?: GetPoliciesByIdHistoryTriggerParamSortColumn;
  sortDirection?: GetPoliciesByIdHistoryTriggerParamSortDirection;
}

export type GetPoliciesIdHistoryTriggerPayload =
  | ValidatedResponse<
      'PagedResponseOfHistoryItem',
      200,
      PagedResponseOfHistoryItem
    >
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<'__Empty', 500, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetPoliciesIdHistoryTrigger = Action<
  GetPoliciesIdHistoryTriggerPayload,
  ActionValidatable
>;

/** Retrieve the trigger history of a single policy */
export const actionGetPoliciesByIdHistoryTrigger = (
    params: GetPoliciesByIdHistoryTrigger
): ActionGetPoliciesIdHistoryTrigger => {
    const path = '/api/policies/v1.0/policies/{id}/history/trigger'.replace(
        '{id}',
        params.id.toString()
    );
    const query = {} as Record<string, any>;
    if (params.filterOpId) {
        query['filter:op[id]'] = params.filterOpId.toString();
    }

    if (params.filterOpName) {
        query['filter:op[name]'] = params.filterOpName.toString();
    }

    if (params.filterId) {
        query['filter[id]'] = params.filterId.toString();
    }

    if (params.filterName) {
        query['filter[name]'] = params.filterName.toString();
    }

    if (params.limit) {
        query.limit = params.limit.toString();
    }

    if (params.offset) {
        query.offset = params.offset.toString();
    }

    if (params.sortColumn) {
        query.sortColumn = params.sortColumn.toString();
    }

    if (params.sortDirection) {
        query.sortDirection = params.sortDirection.toString();
    }

    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [
            {
                status: 200,
                zod: PagedResponseOfHistoryItem,
                type: 'PagedResponseOfHistoryItem'
            },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            { status: 500, zod: __Empty, type: '__Empty' }
        ]
    })
    .build();
};

// put /policies/{policyId}
const PutPoliciesByPolicyIdParamDry = z.boolean();
type PutPoliciesByPolicyIdParamDry = z.infer<
  typeof PutPoliciesByPolicyIdParamDry
>;
const PutPoliciesByPolicyIdParamResponse409 = z.object({
    msg: z.string().optional().nullable()
});
type PutPoliciesByPolicyIdParamResponse409 = z.infer<
  typeof PutPoliciesByPolicyIdParamResponse409
>;
export interface PutPoliciesByPolicyId {
  policyId: UUID;
  dry?: PutPoliciesByPolicyIdParamDry;
  body?: Policy;
}

export type PutPoliciesPolicyIdPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'__Empty', 400, __Empty>
  | ValidatedResponse<'__Empty', 403, __Empty>
  | ValidatedResponse<'__Empty', 404, __Empty>
  | ValidatedResponse<
      'PutPoliciesByPolicyIdParamResponse409',
      409,
      PutPoliciesByPolicyIdParamResponse409
    >
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionPutPoliciesPolicyId = Action<
  PutPoliciesPolicyIdPayload,
  ActionValidatable
>;

/** Update a single policy for a customer by its id */
export const actionPutPoliciesByPolicyId = (
    params: PutPoliciesByPolicyId
): ActionPutPoliciesPolicyId => {
    const path = '/api/policies/v1.0/policies/{policyId}'.replace(
        '{policyId}',
        params.policyId.toString()
    );
    const query = {} as Record<string, any>;
    if (params.dry) {
        query.dry = params.dry.toString();
    }

    return actionBuilder('PUT', path)
    .queryParams(query)
    .data(params.body)
    .config({
        rules: [
            { status: 200, zod: __Empty, type: '__Empty' },
            { status: 400, zod: __Empty, type: '__Empty' },
            { status: 403, zod: __Empty, type: '__Empty' },
            { status: 404, zod: __Empty, type: '__Empty' },
            {
                status: 409,
                zod: PutPoliciesByPolicyIdParamResponse409,
                type: 'PutPoliciesByPolicyIdParamResponse409'
            }
        ]
    })
    .build();
};

// get /status
export type GetStatusPayload =
  | ValidatedResponse<'__Empty', 200, __Empty>
  | ValidatedResponse<'unknown', undefined, unknown>;
export type ActionGetStatus = Action<GetStatusPayload, ActionValidatable>;
export const actionGetStatus = (): ActionGetStatus => {
    const path = '/api/policies/v1.0/status';
    const query = {} as Record<string, any>;
    return actionBuilder('GET', path)
    .queryParams(query)
    .config({
        rules: [{ status: 200, zod: __Empty, type: '__Empty' }]
    })
    .build();
};
"
`;
