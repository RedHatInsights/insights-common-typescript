{{!
    Based on https://github.com/foxel/openapi3-typescript-codegen/blob/master/templates/typescript/schemas.ts.handlebars
    - Removed security context, we only want the types
    - Removed double quotes on strings and using single quotes
}}
{{!top level schemas}}
/**
* Generated code, DO NOT modify directly.
*/
/* eslint-disable @typescript-eslint/no-empty-interface */
import * as z from 'zod';

{{#each components.schemas}}
    {{#if (and? @root.generateEnums (eq? type 'string') enum)}}
export const {{{schemaRefToTypeName @key}}}Enum = zodSchema{{{schemaRefToTypeName @key}}}();
export enum {{{schemaRefToTypeName @key}}} {
{{#each enum}}
    {{.}} = '{{value this ''}}',
{{/each}}
}

    {{else}}
export const {{{schemaRefToTypeName @key}}} = zodSchema{{{schemaRefToTypeName @key}}}();
{{#if (or? (eq? type 'object') (eq? type undefined))}}export interface {{{schemaRefToTypeName @key}}} {{> schema}}
{{else}}export type {{{schemaRefToTypeName @key}}} = {{> schema}};
{{/if}}

    {{/if}}
{{/each}}

{{#each components.schemas}}
{{#if (and? @root.generateEnums (eq? type 'string') enum)}}
export function zodSchema{{{schemaRefToTypeName @key}}}() {
    return z.nativeEnum({{{schemaRefToTypeName @key}}})
}
{{else}}

export function zodSchema{{schemaRefToTypeName @key}}() {
    return
{{~#if (or? properties additionalProperties)}}
    {{#if (and? properties additionalProperties)}}
 z.union([
    {{/if}}
    {{#if properties}}
 z.object({
     {{> zodschema}} })
    {{~/if~}}
    {{#if (and? properties additionalProperties)}}
,
    {{/if}}
    {{~#if additionalProperties}}
 z.record({{> zodschema additionalProperties namespace=../namespace }})
    {{~/if~}}
    {{#if (and? properties additionalProperties)}}
        )]
    {{/if}}
{{~else}}
 z.void()
{{~/if~}}
;
}

{{/if}}
{{/each}}
