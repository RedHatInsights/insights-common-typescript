/**
* Generated code, DO NOT modify directly.
*/
/* eslint-disable max-len */

import { actionBuilder } from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
import * as schemas from './Types';

{{#each paths as |operations path|~}}
    {{~#with operations.get}}{{>request_params method="GET" path=path name=(coalesce operationId (concat 'get' (className @path)))}}{{/with}}
    {{~#with operations.post}}{{>request_params method="POST" path=path name=(coalesce operationId (concat 'post' (className @path)))}}{{/with}}
    {{~#with operations.put}}{{>request_params method="PUT" path=path name=(coalesce operationId (concat 'put' (className @path)))}}{{/with}}
    {{~#with operations.delete}}{{>request_params method="DELETE" path=path name=(coalesce operationId (concat 'delete' (className @path)))}}{{/with}}
{{~/each}}

{{#each paths as |operations path|}}
    {{~#with operations.get}}{{>operation method="GET" path=path name=(coalesce operationId (concat 'get' (className @path)))}}{{/with}}
    {{~#with operations.post}}{{>operation method="POST" path=path name=(coalesce operationId (concat 'post' (className @path)))}}{{/with}}
    {{~#with operations.put}}{{>operation method="PUT" path=path name=(coalesce operationId (concat 'put' (className @path)))}}{{/with~}}
    {{~#with operations.delete}}{{>operation method="DELETE" path=path name=(coalesce operationId (concat 'delete' (className @path)))}}{{/with}}
{{~/each~}}
{{#*inline "operation"}}
{{#if summary}}/** {{summary}} */{{/if}}
export const action{{className name}} = ({{>operation_arg .}}): Action => {
    const path = '{{@root.servers.[0].variables.basePath.default}}{{path}}'
    {{~#each parameters}}
    {{~#with (deref this @root)}}{{#switch in}}{{#case "path"}}
    .replace('{{concat "{" name "}"}}', params.{{valueName name}}.toString()){{/case}}{{/switch}}{{/with~}}
    {{/each~}}
    ;

    const query = {} as Record<string, any>;
    {{#each parameters}}
    {{~#with (deref this @root)}}{{#switch in}}
    {{~#case "query"}}
    query['{{name}}'] = params.{{valueName name}};{{/case}}
    {{~/switch}}{{/with}}
    {{/each}}

    return actionBuilder('{{method}}', path)
    .queryParams(query)
    {{#if (deref requestBody @root)}}
    {{#with (deref requestBody @root)}}.data(params.body){{#first content}}{{/first}}{{/with}}
    {{/if}}
    .build();
};

{{/inline}}

{{#*inline "operation_arg"}}
{{#if parameters}}
params: {{>request_params_name .}}{{nop~}}
{{else if (deref requestBody @root)}}
params: {{>request_params_name .}}{{nop~}}
{{/if}}
{{/inline}}
