/**
* Generated code, DO NOT modify directly.
*/
/* eslint-disable max-len */

import { actionBuilder, ValidatedActionContent } from '@redhat-cloud-services/insights-common-typescript';
import { Action } from 'react-fetching-library';
import * as z from 'zod';
import * as schemas from './Types';

// Operations request params
{{#each paths as |operations path|~}}
    {{~#with operations.get}}{{>request_params method="GET" path=path name=(coalesce operationId (concat 'get' (className @path)))}}{{/with}}
    {{~#with operations.post}}{{>request_params method="POST" path=path name=(coalesce operationId (concat 'post' (className @path)))}}{{/with}}
    {{~#with operations.put}}{{>request_params method="PUT" path=path name=(coalesce operationId (concat 'put' (className @path)))}}{{/with}}
    {{~#with operations.delete}}{{>request_params method="DELETE" path=path name=(coalesce operationId (concat 'delete' (className @path)))}}{{/with}}
{{~/each}}

// Operations anonymous responses
{{#each paths as |operations path|~}}
    {{~#with operations.get}}{{>response_anonymous_params method="GET" path=path name=(coalesce operationId (concat 'get' (className @path)))}}{{/with}}
    {{~#with operations.post}}{{>response_anonymous_params method="POST" path=path name=(coalesce operationId (concat 'post' (className @path)))}}{{/with}}
    {{~#with operations.put}}{{>response_anonymous_params method="PUT" path=path name=(coalesce operationId (concat 'put' (className @path)))}}{{/with}}
    {{~#with operations.delete}}{{>response_anonymous_params method="DELETE" path=path name=(coalesce operationId (concat 'delete' (className @path)))}}{{/with}}
{{~/each}}

// Operations
{{#each paths as |operations path|}}
    {{~#with operations.get}}{{>operation method="GET" path=path name=(coalesce operationId (concat 'get' (className @path)))}}{{/with}}
    {{~#with operations.post}}{{>operation method="POST" path=path name=(coalesce operationId (concat 'post' (className @path)))}}{{/with}}
    {{~#with operations.put}}{{>operation method="PUT" path=path name=(coalesce operationId (concat 'put' (className @path)))}}{{/with~}}
    {{~#with operations.delete}}{{>operation method="DELETE" path=path name=(coalesce operationId (concat 'delete' (className @path)))}}{{/with}}
{{~/each~}}
{{#*inline "operation"}}
{{~#if responses ~}}
export type Action{{className name}}Type = {{#each responses ~}}
    {{~#if content.[application/json]}}
        {{~#with content.[application/json]~}}
            {{~#if this.schema.[$ref]~}}
                ValidatedActionContent<'{{schemaRefToTypeName this.schema.[$ref]}}', {{@key}}, schemas.{{schemaRefToTypeName this.schema.[$ref]}}> | {{ else ~}}
                ValidatedActionContent<'unnamed', {{@key}}, z.infer<typeof AnonymousZodSchema{{className ../../name}}{{@key}}>> | {{/if~}}
        {{~/with~}}
    {{~/if ~}}
{{~/each}}ValidatedActionContent<undefined, undefined, unknown>;
{{/if}}

{{#if summary}}/** {{summary}} */{{/if}}
export const action{{className name}} = ({{>operation_arg .}}): {{>action .}} => {
    const path = '{{@root.servers.[0].variables.basePath.default}}{{path}}'
    {{~#each parameters}}
    {{~#with (deref this @root)}}{{#switch in}}{{#case "path"}}
    .replace('{{concat "{" name "}"}}', params.{{valueName name}}.toString()){{/case}}{{/switch}}{{/with~}}
    {{/each~}}
    ;

    const query = {} as Record<string, any>;
    {{#each parameters}}
    {{~#with (deref this @root)}}{{#switch in}}
    {{~#case "query"}}
    query['{{name}}'] = params.{{valueName name}};{{/case}}
    {{~/switch}}{{/with}}
    {{/each}}

    return actionBuilder('{{method}}', path)
    .queryParams(query)
    {{#if (deref requestBody @root)}}
    {{#with (deref requestBody @root)}}.data(params.body){{#first content}}{{/first}}{{/with}}
    {{/if}}
    {{#if responses}}
    .config({
        rules: [
        {{#each responses }}
            {{#with content.[application/json]}}
                {
                    status: {{@key}},
                {{#if this.schema.[$ref]}}
                    zod: schemas.{{schemaRefToTypeName this.schema.[$ref]}},
                    type: '{{schemaRefToTypeName this.schema.[$ref]}}'
                {{else}}
                    zod: AnonymousZodSchema{{className ../../name}}{{@key}},
                    type: 'unamed'
                {{/if}}
                },
            {{/with}}
        {{/each}}
        ]
    })
    {{/if}}
    .build();
};

{{/inline}}

{{#*inline "operation_arg"}}
{{#if parameters}}
params: {{>request_params_name .}}{{nop~}}
{{else if (deref requestBody @root)}}
params: {{>request_params_name .}}{{nop~}}
{{/if}}
{{/inline}}
